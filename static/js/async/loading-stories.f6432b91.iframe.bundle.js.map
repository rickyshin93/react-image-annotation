{"version":3,"file":"static/js/async/loading-stories.f6432b91.iframe.bundle.js","sources":["webpack://@rockshin/react-image-annotation/./stories/loading.stories.tsx"],"sourcesContent":["import type { Meta, StoryObj } from '@storybook/react'\nimport { useEffect, useState } from 'react'\nimport { Button } from '../src/Button'\nimport Loading from '../src/components/loading/index'\nimport '../src/styles/base.css'\nconst meta: Meta<typeof Loading> = {\n  title: 'Components/Loading',\n  component: Loading,\n  parameters: {\n    layout: 'centered',\n  },\n  tags: ['autodocs'],\n}\n\nexport default meta\ntype Story = StoryObj<typeof Loading>\n\nexport const Default: Story = {\n  args: {\n    loadingText: 'Loading...',\n    className: 'w-[400px]',\n    isLoading: true,\n  },\n}\n\nexport const CustomConfiguration: Story = {\n  args: {\n    loadingText: 'Processing...',\n    progressInterval: 50,\n    progressIncrement: 5,\n    maxAutoProgress: 95,\n    className: 'w-[400px]',\n    loadingSpinnerClassName: 'border-purple-500',\n    progressBarClassName: 'bg-gradient-to-r from-purple-500 to-purple-300',\n    isLoading: true,\n  },\n}\n\nconst FetchExample = () => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [data, setData] = useState('')\n\n  const handleFetch = async () => {\n    setIsLoading(true)\n    try {\n      await new Promise(resolve => setTimeout(resolve, 2000))\n      setData(\n        'Data successfully fetched! This is an example of how the component expands to show content after loading completes.',\n      )\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <Button onClick={handleFetch} primary>\n        {isLoading ? 'Fetching...' : 'Fetch Data'}\n      </Button>\n      <div className=\"m-2\" />\n      <Loading loadingText=\"Fetching data...\" isLoading={isLoading} content={data} className=\"w-[400px]\" />\n    </div>\n  )\n}\n\nexport const WithFetch: Story = {\n  render: () => <FetchExample />,\n}\n\nconst AutoCompleteExample = () => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [query, setQuery] = useState('')\n  const [results, setResults] = useState('')\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      if (query) {\n        setIsLoading(true)\n        // Simulate API call\n        setTimeout(() => {\n          setResults(`Found results for \"${query}\": \\n\\nExample Result 1\\n\\nExample Result 2\\n\\nExample Result 3`)\n          setIsLoading(false)\n        }, 1500)\n      }\n    }, 300)\n\n    return () => clearTimeout(timer)\n  }, [query])\n\n  return (\n    <div className=\"space-y-4\">\n      <input\n        type=\"text\"\n        value={query}\n        onChange={e => setQuery(e.target.value)}\n        placeholder=\"Type to search...\"\n        className=\"w-full px-4 py-2 rounded-md border border-gray-300 focus:border-purple-500 focus:ring-1 focus:ring-purple-500 outline-none\"\n      />\n      <Loading\n        loadingText=\"Searching...\"\n        isLoading={isLoading}\n        content={results}\n        className=\"w-[400px]\"\n        progressInterval={50}\n      />\n    </div>\n  )\n}\n\nexport const WithAutoComplete: Story = {\n  render: () => <AutoCompleteExample />,\n}\n\nexport const SlowProgress: Story = {\n  args: {\n    loadingText: 'Uploading large file...',\n    className: 'w-[400px]',\n    progressInterval: 200,\n    progressIncrement: 1,\n    maxAutoProgress: 95,\n    isLoading: true,\n  },\n}\n\nexport const CustomStyling: Story = {\n  args: {\n    loadingText: 'Processing...',\n    className: 'w-[400px] bg-gradient-to-r from-purple-50 to-pink-50',\n    loadingSpinnerClassName: 'border-pink-500',\n    progressBarClassName: 'bg-gradient-to-r from-purple-500 to-pink-500',\n    isLoading: true,\n  },\n}\n\n// Dark theme example with proper contrast\nexport const DarkTheme: Story = {\n  decorators: [\n    Story => (\n      <div className=\"bg-slate-800 p-8 rounded-lg\">\n        <Story />\n      </div>\n    ),\n  ],\n  args: {\n    loadingText: 'Loading...',\n    className: 'w-[400px] bg-slate-700',\n    loadingSpinnerClassName: 'border-purple-400',\n    progressBarClassName: 'bg-gradient-to-r from-purple-400 to-purple-200',\n    contentClassName: 'text-slate-200',\n    isLoading: true,\n  },\n}\n\n// Add new examples for children usage\nconst ComplexContent = () => (\n  <div className=\"p-4 space-y-4\">\n    <h3 className=\"text-xl font-semibold text-purple-700\">Custom Content</h3>\n    <div className=\"flex gap-4\">\n      <div className=\"bg-purple-100 p-4 rounded-lg flex-1\">\n        <h4 className=\"font-medium mb-2\">Section 1</h4>\n        <p>This is a custom React component inside Loading.</p>\n      </div>\n      <div className=\"bg-pink-100 p-4 rounded-lg flex-1\">\n        <h4 className=\"font-medium mb-2\">Section 2</h4>\n        <p>You can put any React nodes here.</p>\n      </div>\n    </div>\n  </div>\n)\n\nexport const WithChildren: Story = {\n  render: () => {\n    const [isLoading, setIsLoading] = useState(true)\n\n    useEffect(() => {\n      const timer = setTimeout(() => setIsLoading(false), 2000)\n      return () => clearTimeout(timer)\n    }, [])\n\n    return (\n      <Loading isLoading={isLoading} className=\"w-[600px]\">\n        <ComplexContent />\n      </Loading>\n    )\n  },\n}\n\nexport const WithNestedComponents: Story = {\n  render: () => {\n    const [isLoading, setIsLoading] = useState(true)\n\n    useEffect(() => {\n      const timer = setTimeout(() => setIsLoading(false), 2000)\n      return () => clearTimeout(timer)\n    }, [])\n\n    return (\n      <Loading isLoading={isLoading} className=\"w-[400px]\">\n        <div className=\"p-4\">\n          <div className=\"flex items-center gap-2 mb-4\">\n            <div className=\"w-12 h-12 rounded-full bg-purple-200\" />\n            <div>\n              <h3 className=\"font-medium\">John Doe</h3>\n              <p className=\"text-sm text-gray-600\">Software Engineer</p>\n            </div>\n          </div>\n          <div className=\"space-y-2\">\n            <div className=\"h-2 bg-purple-100 rounded w-full\" />\n            <div className=\"h-2 bg-purple-100 rounded w-3/4\" />\n            <div className=\"h-2 bg-purple-100 rounded w-1/2\" />\n          </div>\n        </div>\n      </Loading>\n    )\n  },\n}\n"],"names":[],"mappings":";AAgFA;AAAA;AAAA;AAAA;AAAA;AAAA"}