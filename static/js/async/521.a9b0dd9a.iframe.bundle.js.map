{"version":3,"file":"static/js/async/521.a9b0dd9a.iframe.bundle.js","sources":["webpack://@rockshin/react-image-annotation/./node_modules/.pnpm/@tldraw+utils@3.7.2/node_modules/@tldraw/utils/dist-esm/lib/version.mjs","webpack://@rockshin/react-image-annotation/./node_modules/.pnpm/@tldraw+state@3.7.2/node_modules/@tldraw/state/dist-esm/lib/warnings.mjs","webpack://@rockshin/react-image-annotation/./node_modules/.pnpm/@tldraw+editor@3.7.2_react-dom@18.3.1_react@18.3.1/node_modules/@tldraw/editor/dist-esm/lib/components/default-components/DefaultErrorFallback.mjs","webpack://@rockshin/react-image-annotation/./node_modules/.pnpm/@tldraw+editor@3.7.2_react-dom@18.3.1_react@18.3.1/node_modules/@tldraw/editor/dist-esm/lib/exports/StyleEmbedder.mjs","webpack://@rockshin/react-image-annotation/./node_modules/.pnpm/@tldraw+editor@3.7.2_react-dom@18.3.1_react@18.3.1/node_modules/@tldraw/editor/dist-esm/lib/exports/exportToSvg.mjs","webpack://@rockshin/react-image-annotation/./node_modules/.pnpm/@tldraw+editor@3.7.2_react-dom@18.3.1_react@18.3.1/node_modules/@tldraw/editor/dist-esm/lib/utils/sync/alerts.mjs","webpack://@rockshin/react-image-annotation/./node_modules/.pnpm/@tldraw+editor@3.7.2_react-dom@18.3.1_react@18.3.1/node_modules/@tldraw/editor/dist-esm/lib/license/Watermark.mjs","webpack://@rockshin/react-image-annotation/./node_modules/.pnpm/@radix-ui+react-dialog@1.1.4_@types+react@18.3.18_react-dom@18.3.1_react@18.3.1/node_modules/@radix-ui/react-dialog/dist/index.mjs","webpack://@rockshin/react-image-annotation/./node_modules/.pnpm/tldraw@3.7.2_@types+react@18.3.18_react-dom@18.3.1_react@18.3.1/node_modules/tldraw/tldraw.css","webpack://@rockshin/react-image-annotation/./node_modules/.pnpm/tldraw@3.7.2_@types+react@18.3.18_react-dom@18.3.1_react@18.3.1/node_modules/tldraw/dist-esm/lib/ui/hooks/usePrint.mjs","webpack://@rockshin/react-image-annotation/./node_modules/.pnpm/tldraw@3.7.2_@types+react@18.3.18_react-dom@18.3.1_react@18.3.1/node_modules/tldraw/dist-esm/lib/canvas/TldrawCropHandles.mjs","webpack://@rockshin/react-image-annotation/./node_modules/.pnpm/tldraw@3.7.2_@types+react@18.3.18_react-dom@18.3.1_react@18.3.1/node_modules/tldraw/dist-esm/lib/shapes/arrow/arrowheads.mjs","webpack://@rockshin/react-image-annotation/./node_modules/.pnpm/tldraw@3.7.2_@types+react@18.3.18_react-dom@18.3.1_react@18.3.1/node_modules/tldraw/dist-esm/lib/shapes/note/NoteShapeUtil.mjs","webpack://@rockshin/react-image-annotation/./node_modules/.pnpm/tldraw@3.7.2_@types+react@18.3.18_react-dom@18.3.1_react@18.3.1/node_modules/tldraw/dist-esm/lib/ui/components/Minimap/minimap-webgl-setup.mjs","webpack://@rockshin/react-image-annotation/./node_modules/.pnpm/tldraw@3.7.2_@types+react@18.3.18_react-dom@18.3.1_react@18.3.1/node_modules/tldraw/dist-esm/lib/ui/components/Toolbar/OverflowingToolbar.mjs","webpack://@rockshin/react-image-annotation/./node_modules/.pnpm/tldraw@3.7.2_@types+react@18.3.18_react-dom@18.3.1_react@18.3.1/node_modules/tldraw/dist-esm/lib/utils/assets/preload-font.mjs"],"sourcesContent":["const TLDRAW_LIBRARY_VERSION_KEY = \"__TLDRAW_LIBRARY_VERSIONS__\";\nfunction getLibraryVersions() {\n  if (globalThis[TLDRAW_LIBRARY_VERSION_KEY]) {\n    return globalThis[TLDRAW_LIBRARY_VERSION_KEY];\n  }\n  const info = {\n    versions: [],\n    didWarn: false,\n    scheduledNotice: null\n  };\n  Object.defineProperty(globalThis, TLDRAW_LIBRARY_VERSION_KEY, {\n    value: info,\n    writable: false,\n    configurable: false,\n    enumerable: false\n  });\n  return info;\n}\nfunction clearRegisteredVersionsForTests() {\n  const info = getLibraryVersions();\n  info.versions = [];\n  info.didWarn = false;\n  if (info.scheduledNotice) {\n    clearTimeout(info.scheduledNotice);\n    info.scheduledNotice = null;\n  }\n}\nfunction registerTldrawLibraryVersion(name, version, modules) {\n  if (!name || !version || !modules) {\n    if (true) {\n      throw new Error(\"Missing name/version/module system in built version of tldraw library\");\n    }\n    return;\n  }\n  const info = getLibraryVersions();\n  info.versions.push({ name, version, modules });\n  if (!info.scheduledNotice) {\n    try {\n      info.scheduledNotice = setTimeout(() => {\n        info.scheduledNotice = null;\n        checkLibraryVersions(info);\n      }, 100);\n    } catch {\n      checkLibraryVersions(info);\n    }\n  }\n}\nfunction checkLibraryVersions(info) {\n  if (!info.versions.length) return;\n  if (info.didWarn) return;\n  const sorted = info.versions.sort((a, b) => compareVersions(a.version, b.version));\n  const latestVersion = sorted[sorted.length - 1].version;\n  const matchingVersions = /* @__PURE__ */ new Set();\n  const nonMatchingVersions = /* @__PURE__ */ new Map();\n  for (const lib of sorted) {\n    if (nonMatchingVersions.has(lib.name)) {\n      matchingVersions.delete(lib.name);\n      entry(nonMatchingVersions, lib.name, /* @__PURE__ */ new Set()).add(lib.version);\n      continue;\n    }\n    if (lib.version === latestVersion) {\n      matchingVersions.add(lib.name);\n    } else {\n      matchingVersions.delete(lib.name);\n      entry(nonMatchingVersions, lib.name, /* @__PURE__ */ new Set()).add(lib.version);\n    }\n  }\n  if (nonMatchingVersions.size > 0) {\n    const message = [\n      `${format(\"[tldraw]\", [\"bold\", \"bgRed\", \"textWhite\"])} ${format(\"You have multiple versions of tldraw libraries installed. This can lead to bugs and unexpected behavior.\", [\"textRed\", \"bold\"])}`,\n      \"\",\n      `The latest version you have installed is ${format(`v${latestVersion}`, [\"bold\", \"textBlue\"])}. The following libraries are on the latest version:`,\n      ...Array.from(matchingVersions, (name) => `  \\u2022 \\u2705 ${format(name, [\"bold\"])}`),\n      \"\",\n      `The following libraries are not on the latest version, or have multiple versions installed:`,\n      ...Array.from(nonMatchingVersions, ([name, versions]) => {\n        const sortedVersions = Array.from(versions).sort(compareVersions).map((v) => format(`v${v}`, v === latestVersion ? [\"textGreen\"] : [\"textRed\"]));\n        return `  \\u2022 \\u274C ${format(name, [\"bold\"])} (${sortedVersions.join(\", \")})`;\n      })\n    ];\n    console.log(message.join(\"\\n\"));\n    info.didWarn = true;\n    return;\n  }\n  const potentialDuplicates = /* @__PURE__ */ new Map();\n  for (const lib of sorted) {\n    entry(potentialDuplicates, lib.name, { version: lib.version, modules: [] }).modules.push(\n      lib.modules\n    );\n  }\n  const duplicates = /* @__PURE__ */ new Map();\n  for (const [name, lib] of potentialDuplicates) {\n    if (lib.modules.length > 1) duplicates.set(name, lib);\n  }\n  if (duplicates.size > 0) {\n    const message = [\n      `${format(\"[tldraw]\", [\"bold\", \"bgRed\", \"textWhite\"])} ${format(\"You have multiple instances of some tldraw libraries active. This can lead to bugs and unexpected behavior. \", [\"textRed\", \"bold\"])}`,\n      \"\",\n      \"This usually means that your bundler is misconfigured, and is importing the same library multiple times - usually once as an ES Module, and once as a CommonJS module.\",\n      \"\",\n      \"The following libraries have been imported multiple times:\",\n      ...Array.from(duplicates, ([name, lib]) => {\n        const modules = lib.modules.map((m, i) => m === \"esm\" ? `      ${i + 1}. ES Modules` : `      ${i + 1}. CommonJS`).join(\"\\n\");\n        return `  \\u2022 \\u274C ${format(name, [\"bold\"])} v${lib.version}: \n${modules}`;\n      }),\n      \"\",\n      \"You should configure your bundler to only import one version of each library.\"\n    ];\n    console.log(message.join(\"\\n\"));\n    info.didWarn = true;\n    return;\n  }\n}\nfunction compareVersions(a, b) {\n  const aMatch = a.match(/^(\\d+)\\.(\\d+)\\.(\\d+)(?:-(\\w+))?$/);\n  const bMatch = b.match(/^(\\d+)\\.(\\d+)\\.(\\d+)(?:-(\\w+))?$/);\n  if (!aMatch || !bMatch) return a.localeCompare(b);\n  if (aMatch[1] !== bMatch[1]) return Number(aMatch[1]) - Number(bMatch[1]);\n  if (aMatch[2] !== bMatch[2]) return Number(aMatch[2]) - Number(bMatch[2]);\n  if (aMatch[3] !== bMatch[3]) return Number(aMatch[3]) - Number(bMatch[3]);\n  if (aMatch[4] && bMatch[4]) return aMatch[4].localeCompare(bMatch[4]);\n  if (aMatch[4]) return 1;\n  if (bMatch[4]) return -1;\n  return 0;\n}\nconst formats = {\n  bold: \"1\",\n  textBlue: \"94\",\n  textRed: \"31\",\n  textGreen: \"32\",\n  bgRed: \"41\",\n  textWhite: \"97\"\n};\nfunction format(value, formatters = []) {\n  return `\\x1B[${formatters.map((f) => formats[f]).join(\";\")}m${value}\\x1B[m`;\n}\nfunction entry(map, key, defaultValue) {\n  if (map.has(key)) {\n    return map.get(key);\n  }\n  map.set(key, defaultValue);\n  return defaultValue;\n}\nexport {\n  clearRegisteredVersionsForTests,\n  registerTldrawLibraryVersion\n};\n//# sourceMappingURL=version.mjs.map\n","let didWarnComputedGetter = false;\nfunction logComputedGetterWarning() {\n  if (didWarnComputedGetter) return;\n  didWarnComputedGetter = true;\n  console.warn(\n    `Using \\`@computed\\` as a decorator for getters is deprecated and will be removed in the near future. Please refactor to use \\`@computed\\` as a decorator for methods.\n\n// Before\n@computed\nget foo() {\n\treturn 'foo'\n}\n\n// After\n@computed\ngetFoo() {\n\treturn 'foo'\n}\n`\n  );\n}\nexport {\n  logComputedGetterWarning\n};\n//# sourceMappingURL=warnings.mjs.map\n","import { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nimport { useValue } from \"@tldraw/state-react\";\nimport { noop } from \"@tldraw/utils\";\nimport classNames from \"classnames\";\nimport { useEffect, useLayoutEffect, useRef, useState } from \"react\";\nimport { EditorProvider } from \"../../hooks/useEditor.mjs\";\nimport { useEditorComponents } from \"../../hooks/useEditorComponents.mjs\";\nimport { hardResetEditor } from \"../../utils/hardResetEditor.mjs\";\nimport { refreshPage } from \"../../utils/refreshPage.mjs\";\nimport { ErrorBoundary } from \"../ErrorBoundary.mjs\";\nconst BASE_ERROR_URL = \"https://github.com/tldraw/tldraw/issues/new\";\nconst DefaultErrorFallback = ({ error, editor }) => {\n  const containerRef = useRef(null);\n  const [shouldShowError, setShouldShowError] = useState(process.env.NODE_ENV === \"development\");\n  const [didCopy, setDidCopy] = useState(false);\n  const [shouldShowResetConfirmation, setShouldShowResetConfirmation] = useState(false);\n  let Canvas = null;\n  try {\n    const components = useEditorComponents();\n    Canvas = components.Canvas ?? null;\n  } catch {\n  }\n  const errorMessage = error instanceof Error ? error.message : String(error);\n  const errorStack = error instanceof Error ? error.stack : null;\n  const isDarkModeFromApp = useValue(\n    \"isDarkMode\",\n    () => {\n      try {\n        if (editor) {\n          return editor.user.getIsDarkMode();\n        }\n      } catch {\n      }\n      return null;\n    },\n    [editor]\n  );\n  const [isDarkMode, setIsDarkMode] = useState(null);\n  useLayoutEffect(() => {\n    if (isDarkModeFromApp !== null) {\n      setIsDarkMode(isDarkModeFromApp);\n    }\n    let parent = containerRef.current?.parentElement;\n    let foundParentThemeClass = false;\n    while (parent) {\n      if (parent.classList.contains(\"tl-theme__dark\") || parent.classList.contains(\"tl-theme__light\")) {\n        foundParentThemeClass = true;\n        break;\n      }\n      parent = parent.parentElement;\n    }\n    if (foundParentThemeClass) {\n      setIsDarkMode(null);\n      return;\n    }\n    if (typeof window !== \"undefined\" && \"matchMedia\" in window) {\n      setIsDarkMode(window.matchMedia(\"(prefers-color-scheme: dark)\").matches);\n    }\n  }, [isDarkModeFromApp]);\n  useEffect(() => {\n    if (didCopy) {\n      const timeout = editor?.timers.setTimeout(() => {\n        setDidCopy(false);\n      }, 2e3);\n      return () => clearTimeout(timeout);\n    }\n  }, [didCopy, editor]);\n  const copyError = () => {\n    const textarea = document.createElement(\"textarea\");\n    textarea.value = errorStack ?? errorMessage;\n    document.body.appendChild(textarea);\n    textarea.select();\n    document.execCommand(\"copy\");\n    textarea.remove();\n    setDidCopy(true);\n  };\n  const refresh = () => {\n    refreshPage();\n  };\n  const resetLocalState = async () => {\n    hardResetEditor();\n  };\n  const url = new URL(BASE_ERROR_URL);\n  url.searchParams.set(\"title\", errorMessage);\n  url.searchParams.set(\"labels\", `bug`);\n  url.searchParams.set(\n    \"body\",\n    `Hey, I ran into an error while using tldraw:\n\n\\`\\`\\`js\n${errorStack ?? errorMessage}\n\\`\\`\\`\n\nMy browser: ${navigator.userAgent}`\n  );\n  return /* @__PURE__ */ jsxs(\n    \"div\",\n    {\n      ref: containerRef,\n      className: classNames(\n        \"tl-container tl-error-boundary\",\n        // error-boundary is sometimes used outside of the theme\n        // container, so we need to provide it with a theme for our\n        // styles to work correctly\n        isDarkMode === null ? \"\" : isDarkMode ? \"tl-theme__dark\" : \"tl-theme__light\"\n      ),\n      children: [\n        /* @__PURE__ */ jsx(\"div\", { className: \"tl-error-boundary__overlay\" }),\n        editor && // opportunistically attempt to render the canvas to reassure\n        // the user that their document is still there. there's a good\n        // chance this won't work (ie the error that we're currently\n        // notifying the user about originates in the canvas) so it's\n        // not a big deal if it doesn't work - in that case we just have\n        // a plain grey background.\n        /* @__PURE__ */ jsx(ErrorBoundary, { onError: noop, fallback: () => null, children: /* @__PURE__ */ jsx(EditorProvider, { editor, children: /* @__PURE__ */ jsx(\"div\", { className: \"tl-overlay tl-error-boundary__canvas\", children: Canvas ? /* @__PURE__ */ jsx(Canvas, {}) : null }) }) }),\n        /* @__PURE__ */ jsx(\n          \"div\",\n          {\n            className: classNames(\"tl-modal\", \"tl-error-boundary__content\", {\n              \"tl-error-boundary__content__expanded\": shouldShowError && !shouldShowResetConfirmation\n            }),\n            children: shouldShowResetConfirmation ? /* @__PURE__ */ jsxs(Fragment, { children: [\n              /* @__PURE__ */ jsx(\"h2\", { children: \"Are you sure?\" }),\n              /* @__PURE__ */ jsx(\"p\", { children: \"Resetting your data will delete your drawing and cannot be undone.\" }),\n              /* @__PURE__ */ jsxs(\"div\", { className: \"tl-error-boundary__content__actions\", children: [\n                /* @__PURE__ */ jsx(\"button\", { onClick: () => setShouldShowResetConfirmation(false), children: \"Cancel\" }),\n                /* @__PURE__ */ jsx(\"button\", { className: \"tl-error-boundary__reset\", onClick: resetLocalState, children: \"Reset data\" })\n              ] })\n            ] }) : /* @__PURE__ */ jsxs(Fragment, { children: [\n              /* @__PURE__ */ jsx(\"h2\", { children: \"Something went wrong\" }),\n              /* @__PURE__ */ jsx(\"p\", { children: \"Please refresh the page to continue.\" }),\n              /* @__PURE__ */ jsxs(\"p\", { children: [\n                \"If you keep seeing this screen, you can create a\",\n                \" \",\n                /* @__PURE__ */ jsx(\"a\", { href: url.toString(), children: \"GitHub issue\" }),\n                \" or ask for help on\",\n                \" \",\n                /* @__PURE__ */ jsx(\"a\", { href: \"https://discord.gg/Cq6cPsTfNy\", children: \"Discord\" }),\n                \". If you are still stuck, you can reset the tldraw data on your machine. This may erase the project you were working on, so try to get help first.\"\n              ] }),\n              shouldShowError && /* @__PURE__ */ jsxs(Fragment, { children: [\n                \"Message:\",\n                /* @__PURE__ */ jsx(\"h4\", { children: /* @__PURE__ */ jsx(\"code\", { children: errorMessage }) }),\n                \"Stack trace:\",\n                /* @__PURE__ */ jsxs(\"div\", { className: \"tl-error-boundary__content__error\", children: [\n                  /* @__PURE__ */ jsx(\"pre\", { children: /* @__PURE__ */ jsx(\"code\", { children: errorStack ?? errorMessage }) }),\n                  /* @__PURE__ */ jsx(\"button\", { onClick: copyError, children: didCopy ? \"Copied!\" : \"Copy\" })\n                ] })\n              ] }),\n              /* @__PURE__ */ jsxs(\"div\", { className: \"tl-error-boundary__content__actions\", children: [\n                /* @__PURE__ */ jsx(\"button\", { onClick: () => setShouldShowError(!shouldShowError), children: shouldShowError ? \"Hide details\" : \"Show details\" }),\n                /* @__PURE__ */ jsxs(\"div\", { className: \"tl-error-boundary__content__actions__group\", children: [\n                  /* @__PURE__ */ jsx(\n                    \"button\",\n                    {\n                      className: \"tl-error-boundary__reset\",\n                      onClick: () => setShouldShowResetConfirmation(true),\n                      children: \"Reset data\"\n                    }\n                  ),\n                  /* @__PURE__ */ jsx(\"button\", { className: \"tl-error-boundary__refresh\", onClick: refresh, children: \"Refresh Page\" })\n                ] })\n              ] })\n            ] })\n          }\n        )\n      ]\n    }\n  );\n};\nexport {\n  DefaultErrorFallback\n};\n//# sourceMappingURL=DefaultErrorFallback.mjs.map\n","import { assertExists, objectMapValues, uniqueId } from \"@tldraw/utils\";\nimport { FontEmbedder } from \"./FontEmbedder.mjs\";\nimport {\n  elementStyle,\n  getComputedStyle,\n  getRenderedChildNodes,\n  getRenderedChildren\n} from \"./domUtils.mjs\";\nimport { resourceToDataUrl } from \"./fetchCache.mjs\";\nimport { isPropertyInherited, parseCssValueUrls, shouldIncludeCssProperty } from \"./parseCss.mjs\";\nconst NO_STYLES = {};\nclass StyleEmbedder {\n  constructor(root) {\n    this.root = root;\n  }\n  styles = /* @__PURE__ */ new Map();\n  fonts = new FontEmbedder();\n  readRootElementStyles(rootElement) {\n    this.readElementStyles(rootElement, {\n      shouldRespectDefaults: false,\n      shouldSkipInheritedParentStyles: false\n    });\n    const children = Array.from(getRenderedChildren(rootElement));\n    while (children.length) {\n      const child = children.pop();\n      children.push(...getRenderedChildren(child));\n      this.readElementStyles(child, {\n        shouldRespectDefaults: true,\n        shouldSkipInheritedParentStyles: true\n      });\n    }\n  }\n  readElementStyles(element, { shouldRespectDefaults = true, shouldSkipInheritedParentStyles = true }) {\n    const defaultStyles = shouldRespectDefaults ? getDefaultStylesForTagName(element.tagName.toLowerCase()) : NO_STYLES;\n    const parentStyles = shouldSkipInheritedParentStyles ? this.styles.get(element.parentElement)?.self ?? NO_STYLES : NO_STYLES;\n    const info = {\n      self: styleFromElement(element, { defaultStyles, parentStyles }),\n      before: styleFromPseudoElement(element, \"::before\"),\n      after: styleFromPseudoElement(element, \"::after\")\n    };\n    this.styles.set(element, info);\n  }\n  fetchResources() {\n    const promises = [];\n    for (const info of this.styles.values()) {\n      for (const styles of objectMapValues(info)) {\n        if (!styles) continue;\n        for (const [property, value] of Object.entries(styles)) {\n          if (!value) continue;\n          if (property === \"font-family\") {\n            this.fonts.onFontFamilyValue(value);\n          }\n          const urlMatches = parseCssValueUrls(value);\n          if (urlMatches.length === 0) continue;\n          promises.push(\n            ...urlMatches.map(async ({ url, original }) => {\n              const dataUrl = (await resourceToDataUrl(url)) ?? \"data:\";\n              styles[property] = value.replace(original, `url(\"${dataUrl}\")`);\n            })\n          );\n        }\n      }\n    }\n    return Promise.all(promises);\n  }\n  // custom elements are tricky. if we serialize the dom as-is, the custom elements wont have\n  // their shadow-dom contents serialized. after we've read all the styles, we need to unwrap the\n  // contents of each custom elements shadow dom directly into the parent element itself.\n  unwrapCustomElements() {\n    const visited = /* @__PURE__ */ new Set();\n    const visit = (element, clonedParent) => {\n      if (visited.has(element)) return;\n      visited.add(element);\n      const shadowRoot = element.shadowRoot;\n      if (shadowRoot) {\n        const clonedCustomEl = document.createElement(\"div\");\n        this.styles.set(clonedCustomEl, this.styles.get(element));\n        clonedCustomEl.setAttribute(\"data-tl-custom-element\", element.tagName);\n        (clonedParent ?? element.parentElement).appendChild(clonedCustomEl);\n        for (const child of shadowRoot.childNodes) {\n          if (child instanceof Element) {\n            visit(child, clonedCustomEl);\n          } else {\n            clonedCustomEl.appendChild(child.cloneNode(true));\n          }\n        }\n        element.remove();\n      } else if (clonedParent) {\n        if (element.tagName.toLowerCase() === \"style\") {\n          return;\n        }\n        const clonedEl = element.cloneNode(false);\n        this.styles.set(clonedEl, this.styles.get(element));\n        clonedParent.appendChild(clonedEl);\n        for (const child of getRenderedChildNodes(element)) {\n          if (child instanceof Element) {\n            visit(child, clonedEl);\n          } else {\n            clonedEl.appendChild(child.cloneNode(true));\n          }\n        }\n      }\n    };\n    for (const element of this.styles.keys()) {\n      visit(element, null);\n    }\n  }\n  embedStyles() {\n    let css = \"\";\n    for (const [element, info] of this.styles) {\n      if (info.after || info.before) {\n        const className = `pseudo-${uniqueId()}`;\n        element.classList.add(className);\n        if (info.before) {\n          css += `.${className}::before {${formatCss(info.before)}}\n`;\n        }\n        if (info.after) {\n          css += `.${className}::after {${formatCss(info.after)}}\n`;\n        }\n      }\n      const style = elementStyle(element);\n      for (const [property, value] of Object.entries(info.self)) {\n        if (!value) continue;\n        style.setProperty(property, value);\n      }\n      if (style.fontKerning === \"auto\") {\n        style.fontKerning = \"normal\";\n      }\n    }\n    return css;\n  }\n  async getFontFaceCss() {\n    return await this.fonts.createCss();\n  }\n  dispose() {\n    destroyDefaultStyleFrame();\n  }\n}\nfunction styleFromElement(element, { defaultStyles, parentStyles }) {\n  if (element.computedStyleMap) {\n    return styleFromComputedStyleMap(element.computedStyleMap(), { defaultStyles, parentStyles });\n  }\n  return styleFromComputedStyle(getComputedStyle(element), { defaultStyles, parentStyles });\n}\nfunction styleFromPseudoElement(element, pseudo) {\n  const style = getComputedStyle(element, pseudo);\n  const content = style.getPropertyValue(\"content\");\n  if (content === \"\" || content === \"none\") {\n    return void 0;\n  }\n  return styleFromComputedStyle(style, { defaultStyles: NO_STYLES, parentStyles: NO_STYLES });\n}\nfunction styleFromComputedStyleMap(style, { defaultStyles, parentStyles }) {\n  const styles = {};\n  for (const property of style.keys()) {\n    if (!shouldIncludeCssProperty(property)) continue;\n    const value = style.get(property).toString();\n    if (defaultStyles[property] === value) continue;\n    if (parentStyles[property] === value && isPropertyInherited(property)) continue;\n    styles[property] = value;\n  }\n  return styles;\n}\nfunction styleFromComputedStyle(style, { defaultStyles, parentStyles }) {\n  const styles = {};\n  for (const property of style) {\n    if (!shouldIncludeCssProperty(property)) continue;\n    const value = style.getPropertyValue(property);\n    if (defaultStyles[property] === value) continue;\n    if (parentStyles[property] === value && isPropertyInherited(property)) continue;\n    styles[property] = value;\n  }\n  return styles;\n}\nfunction formatCss(style) {\n  let cssText = \"\";\n  for (const [property, value] of Object.entries(style)) {\n    cssText += `${property}: ${value};`;\n  }\n  return cssText;\n}\nlet defaultStyleFrame;\nconst defaultStylesByTagName = {};\nfunction getDefaultStyleFrame() {\n  if (!defaultStyleFrame) {\n    const frame = document.createElement(\"iframe\");\n    frame.style.display = \"none\";\n    document.body.appendChild(frame);\n    const frameDocument = assertExists(frame.contentDocument, \"frame must have a document\");\n    const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    const foreignObject = document.createElementNS(\"http://www.w3.org/2000/svg\", \"foreignObject\");\n    svg.appendChild(foreignObject);\n    frameDocument.body.appendChild(svg);\n    defaultStyleFrame = { iframe: frame, foreignObject, document: frameDocument };\n  }\n  return defaultStyleFrame;\n}\nfunction destroyDefaultStyleFrame() {\n  if (defaultStyleFrame) {\n    document.body.removeChild(defaultStyleFrame.iframe);\n    defaultStyleFrame = void 0;\n  }\n}\nconst defaultStyleReadOptions = { defaultStyles: NO_STYLES, parentStyles: NO_STYLES };\nfunction getDefaultStylesForTagName(tagName) {\n  let existing = defaultStylesByTagName[tagName];\n  if (!existing) {\n    const { foreignObject, document: document2 } = getDefaultStyleFrame();\n    const element = document2.createElement(tagName);\n    foreignObject.appendChild(element);\n    existing = element.computedStyleMap ? styleFromComputedStyleMap(element.computedStyleMap(), defaultStyleReadOptions) : styleFromComputedStyle(getComputedStyle(element), defaultStyleReadOptions);\n    foreignObject.removeChild(element);\n    defaultStylesByTagName[tagName] = existing;\n  }\n  return existing;\n}\nexport {\n  StyleEmbedder\n};\n//# sourceMappingURL=StyleEmbedder.mjs.map\n","import { assert } from \"@tldraw/utils\";\nimport { flushSync } from \"react-dom\";\nimport { createRoot } from \"react-dom/client\";\nimport { StyleEmbedder } from \"./StyleEmbedder.mjs\";\nimport { embedMedia } from \"./embedMedia.mjs\";\nimport { getSvgJsx } from \"./getSvgJsx.mjs\";\nlet idCounter = 1;\nasync function exportToSvg(editor, shapeIds, opts = {}) {\n  const result = getSvgJsx(editor, shapeIds, opts);\n  if (!result) return void 0;\n  const container = editor.getContainer();\n  const renderTarget = document.createElement(\"div\");\n  renderTarget.className = \"tldraw-svg-export\";\n  renderTarget.inert = true;\n  renderTarget.tabIndex = -1;\n  Object.assign(renderTarget.style, {\n    position: \"absolute\",\n    top: \"0px\",\n    left: \"0px\",\n    width: result.width + \"px\",\n    height: result.height + \"px\",\n    pointerEvents: \"none\",\n    opacity: 0\n  });\n  container.appendChild(renderTarget);\n  const root = createRoot(renderTarget, { identifierPrefix: `export_${idCounter++}_` });\n  try {\n    await Promise.resolve();\n    flushSync(() => {\n      root.render(result.jsx);\n    });\n    await result.exportDelay.resolve();\n    const svg = renderTarget.firstElementChild;\n    assert(svg instanceof SVGSVGElement, \"Expected an SVG element\");\n    await applyChangesToForeignObjects(svg);\n    return { svg, width: result.width, height: result.height };\n  } finally {\n    setTimeout(() => {\n      root.unmount();\n      container.removeChild(renderTarget);\n    }, 0);\n  }\n}\nasync function applyChangesToForeignObjects(svg) {\n  const foreignObjectChildren = [\n    ...svg.querySelectorAll(\"foreignObject.tl-shape-foreign-object > *\")\n  ];\n  if (!foreignObjectChildren.length) return;\n  const styleEmbedder = new StyleEmbedder(svg);\n  try {\n    styleEmbedder.fonts.startFindingCurrentDocumentFontFaces();\n    await Promise.all(foreignObjectChildren.map((el) => embedMedia(el)));\n    for (const el of foreignObjectChildren) {\n      styleEmbedder.readRootElementStyles(el);\n    }\n    await styleEmbedder.fetchResources();\n    const fontCss = await styleEmbedder.getFontFaceCss();\n    styleEmbedder.unwrapCustomElements();\n    const pseudoCss = styleEmbedder.embedStyles();\n    if (fontCss || pseudoCss) {\n      const style = document.createElementNS(\"http://www.w3.org/2000/svg\", \"style\");\n      style.textContent = `${fontCss}\n${pseudoCss}`;\n      svg.prepend(style);\n    }\n  } finally {\n    styleEmbedder.dispose();\n  }\n}\nexport {\n  exportToSvg\n};\n//# sourceMappingURL=exportToSvg.mjs.map\n","function showCantWriteToIndexDbAlert() {\n  window.alert(\n    `Oops! We could not save changes to your browser's storage. We now need to reload the page and try again.\n\nKeep seeing this message?\n\\u2022 If you're using tldraw in a private or \"incognito\" window, try loading tldraw in a regular window or in a different browser.\n\\u2022 If your hard disk is full, try clearing up some space and then reload the page.`\n  );\n}\nfunction showCantReadFromIndexDbAlert() {\n  window.alert(\n    `Oops! We could not access your browser's storage\\u2014and the app won't work correctly without that. We now need to reload the page and try again.\n\nKeep seeing this message?\n\\u2022 If you're using tldraw in a private or \"incognito\" window, try loading tldraw in a regular window or in a different browser.`\n  );\n}\nexport {\n  showCantReadFromIndexDbAlert,\n  showCantWriteToIndexDbAlert\n};\n//# sourceMappingURL=alerts.mjs.map\n","import { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nimport { useValue } from \"@tldraw/state-react\";\nimport { memo, useRef } from \"react\";\nimport { tlenv } from \"../globals/environment.mjs\";\nimport { useCanvasEvents } from \"../hooks/useCanvasEvents.mjs\";\nimport { useEditor } from \"../hooks/useEditor.mjs\";\nimport { usePassThroughWheelEvents } from \"../hooks/usePassThroughWheelEvents.mjs\";\nimport { preventDefault, stopEventPropagation } from \"../utils/dom.mjs\";\nimport { runtime } from \"../utils/runtime.mjs\";\nimport { watermarkDesktopSvg, watermarkMobileSvg } from \"../watermarks.mjs\";\nimport { LicenseManager } from \"./LicenseManager.mjs\";\nimport { useLicenseContext } from \"./LicenseProvider.mjs\";\nimport { useLicenseManagerState } from \"./useLicenseManagerState.mjs\";\nconst WATERMARK_DESKTOP_LOCAL_SRC = `data:image/svg+xml;utf8,${encodeURIComponent(watermarkDesktopSvg)}`;\nconst WATERMARK_MOBILE_LOCAL_SRC = `data:image/svg+xml;utf8,${encodeURIComponent(watermarkMobileSvg)}`;\nconst Watermark = memo(function Watermark2() {\n  const licenseManager = useLicenseContext();\n  const editor = useEditor();\n  const isMobile = useValue(\"is mobile\", () => editor.getViewportScreenBounds().width < 700, [\n    editor\n  ]);\n  const licenseManagerState = useLicenseManagerState(licenseManager);\n  if (![\"licensed-with-watermark\", \"unlicensed\"].includes(licenseManagerState)) return null;\n  return /* @__PURE__ */ jsxs(Fragment, { children: [\n    /* @__PURE__ */ jsx(LicenseStyles, {}),\n    /* @__PURE__ */ jsx(WatermarkInner, { src: isMobile ? WATERMARK_MOBILE_LOCAL_SRC : WATERMARK_DESKTOP_LOCAL_SRC })\n  ] });\n});\nconst WatermarkInner = memo(function WatermarkInner2({ src }) {\n  const editor = useEditor();\n  const isDebugMode = useValue(\"debug mode\", () => editor.getInstanceState().isDebugMode, [editor]);\n  const isMobile = useValue(\"is mobile\", () => editor.getViewportScreenBounds().width < 700, [\n    editor\n  ]);\n  const events = useCanvasEvents();\n  const ref = useRef(null);\n  usePassThroughWheelEvents(ref);\n  const maskCss = `url('${src}') center 100% / 100% no-repeat`;\n  const url = \"https://tldraw.dev\";\n  return /* @__PURE__ */ jsx(\n    \"div\",\n    {\n      ref,\n      className: LicenseManager.className,\n      \"data-debug\": isDebugMode,\n      \"data-mobile\": isMobile,\n      draggable: false,\n      ...events,\n      children: tlenv.isWebview ? /* @__PURE__ */ jsx(\n        \"a\",\n        {\n          draggable: false,\n          role: \"button\",\n          onPointerDown: (e) => {\n            stopEventPropagation(e);\n            preventDefault(e);\n          },\n          onClick: () => runtime.openWindow(url, \"_blank\"),\n          style: { mask: maskCss, WebkitMask: maskCss }\n        }\n      ) : /* @__PURE__ */ jsx(\n        \"a\",\n        {\n          href: url,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          draggable: false,\n          onPointerDown: (e) => {\n            stopEventPropagation(e);\n          },\n          style: { mask: maskCss, WebkitMask: maskCss }\n        }\n      )\n    }\n  );\n});\nconst LicenseStyles = memo(function LicenseStyles2() {\n  const className = LicenseManager.className;\n  const CSS = `/* ------------------- SEE LICENSE -------------------\nThe tldraw watermark is part of tldraw's license. It is shown for unlicensed\nor \"licensed-with-watermark\" users. By using this library, you agree to\npreserve the watermark's behavior, keeping it visible, unobscured, and\navailable to user-interaction.\n\nTo remove the watermark, please purchase a license at tldraw.dev.\n*/\n\n\t.${className} {\n\t\tposition: absolute;\n\t\tbottom: var(--space-2);\n\t\tright: var(--space-2);\n\t\twidth: 96px;\n\t\theight: 32px;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\tz-index: var(--layer-watermark) !important;\n\t\tbackground-color: color-mix(in srgb, var(--color-background) 62%, transparent);\n\t\topacity: 1;\n\t\tborder-radius: 5px;\n\t\tpointer-events: all;\n\t\tpadding: 2px;\n\t\tbox-sizing: content-box;\n\t}\n\n\t.${className} > a {\n\t\tposition: absolute;\n\t\twidth: 96px;\n\t\theight: 32px;\n\t\tpointer-events: all;\n\t\tcursor: inherit;\n\t\tcolor: var(--color-text);\n\t\topacity: .38;\n\t\tbackground-color: currentColor;\n\t}\n\n\t.${className}[data-debug='true'] {\n\t\tbottom: 46px;\n\t}\n\n\t.${className}[data-mobile='true'] {\n\t\tborder-radius: 4px 0px 0px 4px;\n\t\tright: -2px;\n\t\twidth: 8px;\n\t\theight: 48px;\n\t}\n\n\t.${className}[data-mobile='true'] > a {\n\t\twidth: 8px;\n\t\theight: 32px;\n\t}\n\n\t@media (hover: hover) {\n\t\t.${className} > a {\n\t\t\tpointer-events: none;\n\t\t}\n\n\t\t.${className}:hover {\n\t\t\tbackground-color: var(--color-background);\n\t\t\ttransition: background-color 0.2s ease-in-out;\n\t\t\ttransition-delay: 0.32s;\n\t\t}\n\n\t\t.${className}:hover > a {\n\t\t\tanimation: delayed_link 0.2s forwards ease-in-out;\n\t\t\tanimation-delay: 0.32s;\n\t\t}\n\t}\n\n\t@keyframes delayed_link {\n\t\t0% {\n\t\t\tcursor: inherit;\n\t\t\topacity: .38;\n\t\t\tpointer-events: none;\n\t\t}\n\t\t100% {\n\t\t\tcursor: pointer;\n\t\t\topacity: 1;\n\t\t\tpointer-events: all;\n\t\t}\n\t}`;\n  return /* @__PURE__ */ jsx(\"style\", { children: CSS });\n});\nexport {\n  Watermark\n};\n//# sourceMappingURL=Watermark.mjs.map\n","\"use client\";\n\n// packages/react/dialog/src/Dialog.tsx\nimport * as React from \"react\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { createContext, createContextScope } from \"@radix-ui/react-context\";\nimport { useId } from \"@radix-ui/react-id\";\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { DismissableLayer } from \"@radix-ui/react-dismissable-layer\";\nimport { FocusScope } from \"@radix-ui/react-focus-scope\";\nimport { Portal as PortalPrimitive } from \"@radix-ui/react-portal\";\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { useFocusGuards } from \"@radix-ui/react-focus-guards\";\nimport { RemoveScroll } from \"react-remove-scroll\";\nimport { hideOthers } from \"aria-hidden\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nvar DIALOG_NAME = \"Dialog\";\nvar [createDialogContext, createDialogScope] = createContextScope(DIALOG_NAME);\nvar [DialogProvider, useDialogContext] = createDialogContext(DIALOG_NAME);\nvar Dialog = (props) => {\n  const {\n    __scopeDialog,\n    children,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    modal = true\n  } = props;\n  const triggerRef = React.useRef(null);\n  const contentRef = React.useRef(null);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange\n  });\n  return /* @__PURE__ */ jsx(\n    DialogProvider,\n    {\n      scope: __scopeDialog,\n      triggerRef,\n      contentRef,\n      contentId: useId(),\n      titleId: useId(),\n      descriptionId: useId(),\n      open,\n      onOpenChange: setOpen,\n      onOpenToggle: React.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen]),\n      modal,\n      children\n    }\n  );\n};\nDialog.displayName = DIALOG_NAME;\nvar TRIGGER_NAME = \"DialogTrigger\";\nvar DialogTrigger = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeDialog, ...triggerProps } = props;\n    const context = useDialogContext(TRIGGER_NAME, __scopeDialog);\n    const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);\n    return /* @__PURE__ */ jsx(\n      Primitive.button,\n      {\n        type: \"button\",\n        \"aria-haspopup\": \"dialog\",\n        \"aria-expanded\": context.open,\n        \"aria-controls\": context.contentId,\n        \"data-state\": getState(context.open),\n        ...triggerProps,\n        ref: composedTriggerRef,\n        onClick: composeEventHandlers(props.onClick, context.onOpenToggle)\n      }\n    );\n  }\n);\nDialogTrigger.displayName = TRIGGER_NAME;\nvar PORTAL_NAME = \"DialogPortal\";\nvar [PortalProvider, usePortalContext] = createDialogContext(PORTAL_NAME, {\n  forceMount: void 0\n});\nvar DialogPortal = (props) => {\n  const { __scopeDialog, forceMount, children, container } = props;\n  const context = useDialogContext(PORTAL_NAME, __scopeDialog);\n  return /* @__PURE__ */ jsx(PortalProvider, { scope: __scopeDialog, forceMount, children: React.Children.map(children, (child) => /* @__PURE__ */ jsx(Presence, { present: forceMount || context.open, children: /* @__PURE__ */ jsx(PortalPrimitive, { asChild: true, container, children: child }) })) });\n};\nDialogPortal.displayName = PORTAL_NAME;\nvar OVERLAY_NAME = \"DialogOverlay\";\nvar DialogOverlay = React.forwardRef(\n  (props, forwardedRef) => {\n    const portalContext = usePortalContext(OVERLAY_NAME, props.__scopeDialog);\n    const { forceMount = portalContext.forceMount, ...overlayProps } = props;\n    const context = useDialogContext(OVERLAY_NAME, props.__scopeDialog);\n    return context.modal ? /* @__PURE__ */ jsx(Presence, { present: forceMount || context.open, children: /* @__PURE__ */ jsx(DialogOverlayImpl, { ...overlayProps, ref: forwardedRef }) }) : null;\n  }\n);\nDialogOverlay.displayName = OVERLAY_NAME;\nvar DialogOverlayImpl = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeDialog, ...overlayProps } = props;\n    const context = useDialogContext(OVERLAY_NAME, __scopeDialog);\n    return (\n      // Make sure `Content` is scrollable even when it doesn't live inside `RemoveScroll`\n      // ie. when `Overlay` and `Content` are siblings\n      /* @__PURE__ */ jsx(RemoveScroll, { as: Slot, allowPinchZoom: true, shards: [context.contentRef], children: /* @__PURE__ */ jsx(\n        Primitive.div,\n        {\n          \"data-state\": getState(context.open),\n          ...overlayProps,\n          ref: forwardedRef,\n          style: { pointerEvents: \"auto\", ...overlayProps.style }\n        }\n      ) })\n    );\n  }\n);\nvar CONTENT_NAME = \"DialogContent\";\nvar DialogContent = React.forwardRef(\n  (props, forwardedRef) => {\n    const portalContext = usePortalContext(CONTENT_NAME, props.__scopeDialog);\n    const { forceMount = portalContext.forceMount, ...contentProps } = props;\n    const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n    return /* @__PURE__ */ jsx(Presence, { present: forceMount || context.open, children: context.modal ? /* @__PURE__ */ jsx(DialogContentModal, { ...contentProps, ref: forwardedRef }) : /* @__PURE__ */ jsx(DialogContentNonModal, { ...contentProps, ref: forwardedRef }) });\n  }\n);\nDialogContent.displayName = CONTENT_NAME;\nvar DialogContentModal = React.forwardRef(\n  (props, forwardedRef) => {\n    const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n    const contentRef = React.useRef(null);\n    const composedRefs = useComposedRefs(forwardedRef, context.contentRef, contentRef);\n    React.useEffect(() => {\n      const content = contentRef.current;\n      if (content) return hideOthers(content);\n    }, []);\n    return /* @__PURE__ */ jsx(\n      DialogContentImpl,\n      {\n        ...props,\n        ref: composedRefs,\n        trapFocus: context.open,\n        disableOutsidePointerEvents: true,\n        onCloseAutoFocus: composeEventHandlers(props.onCloseAutoFocus, (event) => {\n          event.preventDefault();\n          context.triggerRef.current?.focus();\n        }),\n        onPointerDownOutside: composeEventHandlers(props.onPointerDownOutside, (event) => {\n          const originalEvent = event.detail.originalEvent;\n          const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;\n          const isRightClick = originalEvent.button === 2 || ctrlLeftClick;\n          if (isRightClick) event.preventDefault();\n        }),\n        onFocusOutside: composeEventHandlers(\n          props.onFocusOutside,\n          (event) => event.preventDefault()\n        )\n      }\n    );\n  }\n);\nvar DialogContentNonModal = React.forwardRef(\n  (props, forwardedRef) => {\n    const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n    const hasInteractedOutsideRef = React.useRef(false);\n    const hasPointerDownOutsideRef = React.useRef(false);\n    return /* @__PURE__ */ jsx(\n      DialogContentImpl,\n      {\n        ...props,\n        ref: forwardedRef,\n        trapFocus: false,\n        disableOutsidePointerEvents: false,\n        onCloseAutoFocus: (event) => {\n          props.onCloseAutoFocus?.(event);\n          if (!event.defaultPrevented) {\n            if (!hasInteractedOutsideRef.current) context.triggerRef.current?.focus();\n            event.preventDefault();\n          }\n          hasInteractedOutsideRef.current = false;\n          hasPointerDownOutsideRef.current = false;\n        },\n        onInteractOutside: (event) => {\n          props.onInteractOutside?.(event);\n          if (!event.defaultPrevented) {\n            hasInteractedOutsideRef.current = true;\n            if (event.detail.originalEvent.type === \"pointerdown\") {\n              hasPointerDownOutsideRef.current = true;\n            }\n          }\n          const target = event.target;\n          const targetIsTrigger = context.triggerRef.current?.contains(target);\n          if (targetIsTrigger) event.preventDefault();\n          if (event.detail.originalEvent.type === \"focusin\" && hasPointerDownOutsideRef.current) {\n            event.preventDefault();\n          }\n        }\n      }\n    );\n  }\n);\nvar DialogContentImpl = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeDialog, trapFocus, onOpenAutoFocus, onCloseAutoFocus, ...contentProps } = props;\n    const context = useDialogContext(CONTENT_NAME, __scopeDialog);\n    const contentRef = React.useRef(null);\n    const composedRefs = useComposedRefs(forwardedRef, contentRef);\n    useFocusGuards();\n    return /* @__PURE__ */ jsxs(Fragment, { children: [\n      /* @__PURE__ */ jsx(\n        FocusScope,\n        {\n          asChild: true,\n          loop: true,\n          trapped: trapFocus,\n          onMountAutoFocus: onOpenAutoFocus,\n          onUnmountAutoFocus: onCloseAutoFocus,\n          children: /* @__PURE__ */ jsx(\n            DismissableLayer,\n            {\n              role: \"dialog\",\n              id: context.contentId,\n              \"aria-describedby\": context.descriptionId,\n              \"aria-labelledby\": context.titleId,\n              \"data-state\": getState(context.open),\n              ...contentProps,\n              ref: composedRefs,\n              onDismiss: () => context.onOpenChange(false)\n            }\n          )\n        }\n      ),\n      /* @__PURE__ */ jsxs(Fragment, { children: [\n        /* @__PURE__ */ jsx(TitleWarning, { titleId: context.titleId }),\n        /* @__PURE__ */ jsx(DescriptionWarning, { contentRef, descriptionId: context.descriptionId })\n      ] })\n    ] });\n  }\n);\nvar TITLE_NAME = \"DialogTitle\";\nvar DialogTitle = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeDialog, ...titleProps } = props;\n    const context = useDialogContext(TITLE_NAME, __scopeDialog);\n    return /* @__PURE__ */ jsx(Primitive.h2, { id: context.titleId, ...titleProps, ref: forwardedRef });\n  }\n);\nDialogTitle.displayName = TITLE_NAME;\nvar DESCRIPTION_NAME = \"DialogDescription\";\nvar DialogDescription = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeDialog, ...descriptionProps } = props;\n    const context = useDialogContext(DESCRIPTION_NAME, __scopeDialog);\n    return /* @__PURE__ */ jsx(Primitive.p, { id: context.descriptionId, ...descriptionProps, ref: forwardedRef });\n  }\n);\nDialogDescription.displayName = DESCRIPTION_NAME;\nvar CLOSE_NAME = \"DialogClose\";\nvar DialogClose = React.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeDialog, ...closeProps } = props;\n    const context = useDialogContext(CLOSE_NAME, __scopeDialog);\n    return /* @__PURE__ */ jsx(\n      Primitive.button,\n      {\n        type: \"button\",\n        ...closeProps,\n        ref: forwardedRef,\n        onClick: composeEventHandlers(props.onClick, () => context.onOpenChange(false))\n      }\n    );\n  }\n);\nDialogClose.displayName = CLOSE_NAME;\nfunction getState(open) {\n  return open ? \"open\" : \"closed\";\n}\nvar TITLE_WARNING_NAME = \"DialogTitleWarning\";\nvar [WarningProvider, useWarningContext] = createContext(TITLE_WARNING_NAME, {\n  contentName: CONTENT_NAME,\n  titleName: TITLE_NAME,\n  docsSlug: \"dialog\"\n});\nvar TitleWarning = ({ titleId }) => {\n  const titleWarningContext = useWarningContext(TITLE_WARNING_NAME);\n  const MESSAGE = `\\`${titleWarningContext.contentName}\\` requires a \\`${titleWarningContext.titleName}\\` for the component to be accessible for screen reader users.\n\nIf you want to hide the \\`${titleWarningContext.titleName}\\`, you can wrap it with our VisuallyHidden component.\n\nFor more information, see https://radix-ui.com/primitives/docs/components/${titleWarningContext.docsSlug}`;\n  React.useEffect(() => {\n    if (titleId) {\n      const hasTitle = document.getElementById(titleId);\n      if (!hasTitle) console.error(MESSAGE);\n    }\n  }, [MESSAGE, titleId]);\n  return null;\n};\nvar DESCRIPTION_WARNING_NAME = \"DialogDescriptionWarning\";\nvar DescriptionWarning = ({ contentRef, descriptionId }) => {\n  const descriptionWarningContext = useWarningContext(DESCRIPTION_WARNING_NAME);\n  const MESSAGE = `Warning: Missing \\`Description\\` or \\`aria-describedby={undefined}\\` for {${descriptionWarningContext.contentName}}.`;\n  React.useEffect(() => {\n    const describedById = contentRef.current?.getAttribute(\"aria-describedby\");\n    if (descriptionId && describedById) {\n      const hasDescription = document.getElementById(descriptionId);\n      if (!hasDescription) console.warn(MESSAGE);\n    }\n  }, [MESSAGE, contentRef, descriptionId]);\n  return null;\n};\nvar Root = Dialog;\nvar Trigger = DialogTrigger;\nvar Portal = DialogPortal;\nvar Overlay = DialogOverlay;\nvar Content = DialogContent;\nvar Title = DialogTitle;\nvar Description = DialogDescription;\nvar Close = DialogClose;\nexport {\n  Close,\n  Content,\n  Description,\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogOverlay,\n  DialogPortal,\n  DialogTitle,\n  DialogTrigger,\n  Overlay,\n  Portal,\n  Root,\n  Title,\n  Trigger,\n  WarningProvider,\n  createDialogScope\n};\n//# sourceMappingURL=index.mjs.map\n","// extracted by css-extract-rspack-plugin\nexport {};","import { tlenv, uniqueId, useEditor } from \"@tldraw/editor\";\nimport { useCallback, useRef } from \"react\";\nfunction usePrint() {\n  const editor = useEditor();\n  const prevPrintEl = useRef(null);\n  const prevStyleEl = useRef(null);\n  return useCallback(\n    async function printSelectionOrPages() {\n      const el = document.createElement(\"div\");\n      const style = document.createElement(\"style\");\n      const clearElements = (printEl, styleEl) => {\n        if (printEl) printEl.innerHTML = \"\";\n        if (styleEl && document.head.contains(styleEl)) document.head.removeChild(styleEl);\n        if (printEl && document.body.contains(printEl)) {\n          document.body.removeChild(printEl);\n        }\n      };\n      clearElements(prevPrintEl.current, prevStyleEl.current);\n      prevPrintEl.current = el;\n      prevStyleEl.current = style;\n      const className = `tl-print-surface-${uniqueId()}`;\n      el.className = className;\n      const enableMargins = false;\n      const allowAllPages = false;\n      style.innerHTML = `\n\t\t\t.${className} {\n\t\t\t\tdisplay: none;\n\t\t\t}\n\n\t\t\t.${className} svg {\n\t\t\t\tmax-width: 100%;\n\t\t\t\theight: 100%;\n\t\t\t\tdisplay: block;\n\t\t\t}\n\n\t\t\t@media print {\t\t\t\t  \n\t\t\t\thtml, body {\n\t\t\t\t\tmin-height: 100%;\n\t\t\t\t\theight: 100%;\n\t\t\t\t\tmargin: 0;\n\t\t\t\t}\n\n\t\t\t\tbody {\n\t\t\t\t\tposition: relative;\n\t\t\t\t}\n\n\t\t\t\tbody > * {\n\t\t\t\t\tdisplay: none;\n\t\t\t\t}\n\n\t\t\t\t.tldraw__editor {\n\t\t\t\t\tdisplay: none;\n\t\t\t\t}\n\n\t\t\t\t.${className} {\n\t\t\t\t\tdisplay: block !important;\n\t\t\t\t\tbackground: white;\n\t\t\t\t\tmin-height: 100%;\n\t\t\t\t\theight: 100%;\n\t\t\t\t\tmax-width: 100%;\n\t\t\t\t}\n\n\t\t\t\t.${className}__item {\n\t\t\t\t\tpadding: 10mm;\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\tmin-height: 100%;\n\t\t\t\t\tflex-direction: column;\n\t\t\t\t\tpage-break-after: always;\n\t\t\t\t\tposition: relative;\n\t\t\t\t\toverflow: hidden;\n\t\t\t\t\theight: 100%;\n\t\t\t\t}\n\n\t\t\t\t.${className}__item__main {\n\t\t\t\t\tflex: 1;\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\talign-items: center;\n\t\t\t\t\tjustify-content: center;\n\t\t\t\t\tmax-height: 100%;\n\t\t\t\t}\n\n\t\t\t\t.${className}__item__header {\n\t\t\t\t\tdisplay: none;\n\t\t\t\t}\n\n\t\t\t\t.${className}__item__footer {\n\t\t\t\t\tdisplay: none;\n\t\t\t\t\ttext-align: right;\n\t\t\t\t}\n\n\t\t\t\t.${className}__item__footer__hide {\n\t\t\t\t\tdisplay: none;\n\t\t\t\t}\n\n\t\t\t\t${!enableMargins ? \"\" : `\n\t\t\t\t\t/**\n\t\t\t\t\t * Note: Safari doesn't support removing the page margins to remove them all!\n\t\t\t\t\t */\n\t\t\t\t\t@page {\n\t\t\t\t\t\tmargin:0;\n\t\t\t\t\t}\n\n\t\t\t\t\t.${className} .${className}__item__header {\n\t\t\t\t\t\tdisplay: block;\n\t\t\t\t\t}\n\n\t\t\t\t\t.${className} .${className}__item__footer {\n\t\t\t\t\t\tdisplay: block;\n\t\t\t\t\t}\n\t\t\t\t`}\n\t\t\t}\n\n\t\t`;\n      const beforePrintHandler = () => {\n        document.head.appendChild(style);\n        document.body.appendChild(el);\n      };\n      const afterPrintHandler = () => {\n        editor.once(\"tick\", () => {\n          clearElements(el, style);\n        });\n      };\n      window.addEventListener(\"beforeprint\", beforePrintHandler);\n      window.addEventListener(\"afterprint\", afterPrintHandler);\n      function addPageToPrint(title, footer, svg) {\n        try {\n          el.innerHTML += `<div class=\"${className}__item\">\n        <div class=\"${className}__item__header\">\n          ${title.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\")}\n        </div>\n        <div class=\"${className}__item__main\">\n          ${svg}\n        </div>\n        <div class=\"${className}__item__footer ${className}__item__footer__${footer ? \"\" : \"hide\"}\">\n          ${footer ?? \"\"}\n        </div>\n      </div>`;\n        } catch (e) {\n          console.error(e);\n        }\n      }\n      function triggerPrint() {\n        if (tlenv.isChromeForIos) {\n          beforePrintHandler();\n          window.print();\n        } else if (tlenv.isSafari) {\n          beforePrintHandler();\n          document.execCommand(\"print\", false);\n        } else {\n          window.print();\n        }\n      }\n      const selectedShapeIds = editor.getSelectedShapeIds();\n      const currentPageId = editor.getCurrentPageId();\n      const pages = editor.getPages();\n      const preserveAspectRatio = \"xMidYMid meet\";\n      const svgOpts = {\n        scale: 1,\n        background: false,\n        darkMode: false,\n        preserveAspectRatio\n      };\n      if (editor.getSelectedShapeIds().length > 0) {\n        const svgExport = await editor.getSvgString(selectedShapeIds, svgOpts);\n        if (svgExport) {\n          const page = pages.find((p) => p.id === currentPageId);\n          addPageToPrint(`tldraw \\u2014 ${page?.name}`, null, svgExport.svg);\n          triggerPrint();\n        }\n      } else {\n        if (allowAllPages) {\n          for (let i = 0; i < pages.length; i++) {\n            const page = pages[i];\n            const svgExport = await editor.getSvgString(\n              editor.getSortedChildIdsForParent(page.id),\n              svgOpts\n            );\n            if (svgExport) {\n              addPageToPrint(`tldraw \\u2014 ${page.name}`, `${i}/${pages.length}`, svgExport.svg);\n            }\n          }\n          triggerPrint();\n        } else {\n          const page = editor.getCurrentPage();\n          const svgExport = await editor.getSvgString(\n            editor.getSortedChildIdsForParent(page.id),\n            svgOpts\n          );\n          if (svgExport) {\n            addPageToPrint(`tldraw \\u2014 ${page.name}`, null, svgExport.svg);\n            triggerPrint();\n          }\n        }\n      }\n      window.removeEventListener(\"beforeprint\", beforePrintHandler);\n      window.removeEventListener(\"afterprint\", afterPrintHandler);\n    },\n    [editor]\n  );\n}\nexport {\n  usePrint\n};\n//# sourceMappingURL=usePrint.mjs.map\n","import { jsx, jsxs } from \"react/jsx-runtime\";\nimport { toDomPrecision } from \"@tldraw/editor\";\nimport classNames from \"classnames\";\nfunction TldrawCropHandles({\n  size,\n  width,\n  height,\n  hideAlternateHandles\n}) {\n  const cropStrokeWidth = toDomPrecision(size / 3);\n  const offset = cropStrokeWidth / 2;\n  return /* @__PURE__ */ jsxs(\"svg\", { className: \"tl-overlays__item\", children: [\n    /* @__PURE__ */ jsx(\n      \"polyline\",\n      {\n        className: \"tl-corner-crop-handle\",\n        points: `\n\t\t\t\t\t\t${toDomPrecision(0 - offset)},${toDomPrecision(size)} \n\t\t\t\t\t\t${toDomPrecision(0 - offset)},${toDomPrecision(0 - offset)} \n\t\t\t\t\t\t${toDomPrecision(size)},${toDomPrecision(0 - offset)}`,\n        strokeWidth: cropStrokeWidth,\n        \"data-testid\": \"selection.crop.top_left\",\n        \"aria-label\": \"top_left handle\"\n      }\n    ),\n    /* @__PURE__ */ jsx(\n      \"line\",\n      {\n        className: classNames(\"tl-corner-crop-edge-handle\", {\n          \"tl-hidden\": hideAlternateHandles\n        }),\n        x1: toDomPrecision(width / 2 - size),\n        y1: toDomPrecision(0 - offset),\n        x2: toDomPrecision(width / 2 + size),\n        y2: toDomPrecision(0 - offset),\n        strokeWidth: cropStrokeWidth,\n        \"data-testid\": \"selection.crop.top\",\n        \"aria-label\": \"top handle\"\n      }\n    ),\n    /* @__PURE__ */ jsx(\n      \"polyline\",\n      {\n        className: classNames(\"tl-corner-crop-handle\", {\n          \"tl-hidden\": hideAlternateHandles\n        }),\n        points: `\n\t\t\t\t\t\t${toDomPrecision(width - size)},${toDomPrecision(0 - offset)} \n\t\t\t\t\t\t${toDomPrecision(width + offset)},${toDomPrecision(0 - offset)} \n\t\t\t\t\t\t${toDomPrecision(width + offset)},${toDomPrecision(size)}`,\n        strokeWidth: cropStrokeWidth,\n        \"data-testid\": \"selection.crop.top_right\",\n        \"aria-label\": \"top_right handle\"\n      }\n    ),\n    /* @__PURE__ */ jsx(\n      \"line\",\n      {\n        className: classNames(\"tl-corner-crop-edge-handle\", {\n          \"tl-hidden\": hideAlternateHandles\n        }),\n        x1: toDomPrecision(width + offset),\n        y1: toDomPrecision(height / 2 - size),\n        x2: toDomPrecision(width + offset),\n        y2: toDomPrecision(height / 2 + size),\n        strokeWidth: cropStrokeWidth,\n        \"data-testid\": \"selection.crop.right\",\n        \"aria-label\": \"right handle\"\n      }\n    ),\n    /* @__PURE__ */ jsx(\n      \"polyline\",\n      {\n        className: \"tl-corner-crop-handle\",\n        points: `\n\t\t\t\t\t\t${toDomPrecision(width + offset)},${toDomPrecision(height - size)} \n\t\t\t\t\t\t${toDomPrecision(width + offset)},${toDomPrecision(height + offset)}\n\t\t\t\t\t\t${toDomPrecision(width - size)},${toDomPrecision(height + offset)}`,\n        strokeWidth: cropStrokeWidth,\n        \"data-testid\": \"selection.crop.bottom_right\",\n        \"aria-label\": \"bottom_right handle\"\n      }\n    ),\n    /* @__PURE__ */ jsx(\n      \"line\",\n      {\n        className: classNames(\"tl-corner-crop-edge-handle\", {\n          \"tl-hidden\": hideAlternateHandles\n        }),\n        x1: toDomPrecision(width / 2 - size),\n        y1: toDomPrecision(height + offset),\n        x2: toDomPrecision(width / 2 + size),\n        y2: toDomPrecision(height + offset),\n        strokeWidth: cropStrokeWidth,\n        \"data-testid\": \"selection.crop.bottom\",\n        \"aria-label\": \"bottom handle\"\n      }\n    ),\n    /* @__PURE__ */ jsx(\n      \"polyline\",\n      {\n        className: classNames(\"tl-corner-crop-handle\", {\n          \"tl-hidden\": hideAlternateHandles\n        }),\n        points: `\n\t\t\t\t\t\t${toDomPrecision(0 + size)},${toDomPrecision(height + offset)} \n\t\t\t\t\t\t${toDomPrecision(0 - offset)},${toDomPrecision(height + offset)}\n\t\t\t\t\t\t${toDomPrecision(0 - offset)},${toDomPrecision(height - size)}`,\n        strokeWidth: cropStrokeWidth,\n        \"data-testid\": \"selection.crop.bottom_left\",\n        \"aria-label\": \"bottom_left handle\"\n      }\n    ),\n    /* @__PURE__ */ jsx(\n      \"line\",\n      {\n        className: classNames(\"tl-corner-crop-edge-handle\", {\n          \"tl-hidden\": hideAlternateHandles\n        }),\n        x1: toDomPrecision(0 - offset),\n        y1: toDomPrecision(height / 2 - size),\n        x2: toDomPrecision(0 - offset),\n        y2: toDomPrecision(height / 2 + size),\n        strokeWidth: cropStrokeWidth,\n        \"data-testid\": \"selection.crop.left\",\n        \"aria-label\": \"left handle\"\n      }\n    )\n  ] });\n}\nexport {\n  TldrawCropHandles\n};\n//# sourceMappingURL=TldrawCropHandles.mjs.map\n","import { HALF_PI, PI, Vec, intersectCircleCircle } from \"@tldraw/editor\";\nfunction getArrowPoints(info, side, strokeWidth) {\n  const PT = side === \"end\" ? info.end.point : info.start.point;\n  const PB = side === \"end\" ? info.start.point : info.end.point;\n  const compareLength = info.isStraight ? Vec.Dist(PB, PT) : Math.abs(info.bodyArc.length);\n  const length = Math.max(Math.min(compareLength / 5, strokeWidth * 3), strokeWidth);\n  let P0;\n  if (info.isStraight) {\n    P0 = Vec.Nudge(PT, PB, length);\n  } else {\n    const ints = intersectCircleCircle(PT, length, info.handleArc.center, info.handleArc.radius);\n    P0 = side === \"end\" ? info.handleArc.sweepFlag ? ints[0] : ints[1] : info.handleArc.sweepFlag ? ints[1] : ints[0];\n  }\n  if (Vec.IsNaN(P0)) {\n    P0 = info.start.point;\n  }\n  return {\n    point: PT,\n    int: P0\n  };\n}\nfunction getArrowhead({ point, int }) {\n  const PL = Vec.RotWith(int, point, PI / 6);\n  const PR = Vec.RotWith(int, point, -PI / 6);\n  return `M ${PL.x} ${PL.y} L ${point.x} ${point.y} L ${PR.x} ${PR.y}`;\n}\nfunction getTriangleHead({ point, int }) {\n  const PL = Vec.RotWith(int, point, PI / 6);\n  const PR = Vec.RotWith(int, point, -PI / 6);\n  return `M ${PL.x} ${PL.y} L ${PR.x} ${PR.y} L ${point.x} ${point.y} Z`;\n}\nfunction getInvertedTriangleHead({ point, int }) {\n  const d = Vec.Sub(int, point).div(2);\n  const PL = Vec.Add(point, Vec.Rot(d, HALF_PI));\n  const PR = Vec.Sub(point, Vec.Rot(d, HALF_PI));\n  return `M ${PL.x} ${PL.y} L ${int.x} ${int.y} L ${PR.x} ${PR.y} Z`;\n}\nfunction getDotHead({ point, int }) {\n  const A = Vec.Lrp(point, int, 0.45);\n  const r = Vec.Dist(A, point);\n  return `M ${A.x - r},${A.y}\n  a ${r},${r} 0 1,0 ${r * 2},0\n  a ${r},${r} 0 1,0 -${r * 2},0 `;\n}\nfunction getDiamondHead({ point, int }) {\n  const PB = Vec.Lrp(point, int, 0.75);\n  const PL = Vec.RotWith(PB, point, PI / 4);\n  const PR = Vec.RotWith(PB, point, -PI / 4);\n  const PQ = Vec.Lrp(PL, PR, 0.5);\n  PQ.add(Vec.Sub(PQ, point));\n  return `M ${PQ.x} ${PQ.y} L ${PR.x} ${PR.y} ${point.x} ${point.y} L ${PL.x} ${PL.y} Z`;\n}\nfunction getSquareHead({ int, point }) {\n  const PB = Vec.Lrp(point, int, 0.85);\n  const d = Vec.Sub(PB, point).div(2);\n  const PL1 = Vec.Add(point, Vec.Rot(d, HALF_PI));\n  const PR1 = Vec.Sub(point, Vec.Rot(d, HALF_PI));\n  const PL2 = Vec.Add(PB, Vec.Rot(d, HALF_PI));\n  const PR2 = Vec.Sub(PB, Vec.Rot(d, HALF_PI));\n  return `M ${PL1.x} ${PL1.y} L ${PL2.x} ${PL2.y} L ${PR2.x} ${PR2.y} L ${PR1.x} ${PR1.y} Z`;\n}\nfunction getBarHead({ int, point }) {\n  const d = Vec.Sub(int, point).div(2);\n  const PL = Vec.Add(point, Vec.Rot(d, HALF_PI));\n  const PR = Vec.Sub(point, Vec.Rot(d, HALF_PI));\n  return `M ${PL.x} ${PL.y} L ${PR.x} ${PR.y}`;\n}\nfunction getArrowheadPathForType(info, side, strokeWidth) {\n  const type = side === \"end\" ? info.end.arrowhead : info.start.arrowhead;\n  if (type === \"none\") return;\n  const points = getArrowPoints(info, side, strokeWidth);\n  if (!points) return;\n  switch (type) {\n    case \"bar\":\n      return getBarHead(points);\n    case \"square\":\n      return getSquareHead(points);\n    case \"diamond\":\n      return getDiamondHead(points);\n    case \"dot\":\n      return getDotHead(points);\n    case \"inverted\":\n      return getInvertedTriangleHead(points);\n    case \"arrow\":\n      return getArrowhead(points);\n    case \"triangle\":\n      return getTriangleHead(points);\n  }\n  return \"\";\n}\nexport {\n  getArrowheadPathForType\n};\n//# sourceMappingURL=arrowheads.mjs.map\n","import { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nimport {\n  Box,\n  Group2d,\n  Rectangle2d,\n  ShapeUtil,\n  Vec,\n  WeakCache,\n  getDefaultColorTheme,\n  lerp,\n  noteShapeMigrations,\n  noteShapeProps,\n  rng,\n  toDomPrecision,\n  useEditor,\n  useValue\n} from \"@tldraw/editor\";\nimport { useCallback } from \"react\";\nimport { useCurrentTranslation } from \"../../ui/hooks/useTranslation/useTranslation.mjs\";\nimport { isRightToLeftLanguage } from \"../../utils/text/text.mjs\";\nimport { HyperlinkButton } from \"../shared/HyperlinkButton.mjs\";\nimport { SvgTextLabel } from \"../shared/SvgTextLabel.mjs\";\nimport { TextLabel } from \"../shared/TextLabel.mjs\";\nimport {\n  FONT_FAMILIES,\n  LABEL_FONT_SIZES,\n  LABEL_PADDING,\n  TEXT_PROPS\n} from \"../shared/default-shape-constants.mjs\";\nimport { getFontDefForExport } from \"../shared/defaultStyleDefs.mjs\";\nimport { startEditingShapeWithLabel } from \"../../tools/SelectTool/selectHelpers.mjs\";\nimport { useDefaultColorTheme } from \"../shared/useDefaultColorTheme.mjs\";\nimport {\n  CLONE_HANDLE_MARGIN,\n  NOTE_CENTER_OFFSET,\n  NOTE_SIZE,\n  getNoteShapeForAdjacentPosition\n} from \"./noteHelpers.mjs\";\nclass NoteShapeUtil extends ShapeUtil {\n  static type = \"note\";\n  static props = noteShapeProps;\n  static migrations = noteShapeMigrations;\n  canEdit() {\n    return true;\n  }\n  hideResizeHandles() {\n    return true;\n  }\n  hideSelectionBoundsFg() {\n    return false;\n  }\n  getDefaultProps() {\n    return {\n      color: \"black\",\n      size: \"m\",\n      text: \"\",\n      font: \"draw\",\n      align: \"middle\",\n      verticalAlign: \"middle\",\n      labelColor: \"black\",\n      growY: 0,\n      fontSizeAdjustment: 0,\n      url: \"\",\n      scale: 1\n    };\n  }\n  getGeometry(shape) {\n    const { labelHeight, labelWidth } = getLabelSize(this.editor, shape);\n    const { scale } = shape.props;\n    const lh = labelHeight * scale;\n    const lw = labelWidth * scale;\n    const nw = NOTE_SIZE * scale;\n    const nh = getNoteHeight(shape);\n    return new Group2d({\n      children: [\n        new Rectangle2d({ width: nw, height: nh, isFilled: true }),\n        new Rectangle2d({\n          x: shape.props.align === \"start\" ? 0 : shape.props.align === \"end\" ? nw - lw : (nw - lw) / 2,\n          y: shape.props.verticalAlign === \"start\" ? 0 : shape.props.verticalAlign === \"end\" ? nh - lh : (nh - lh) / 2,\n          width: lw,\n          height: lh,\n          isFilled: true,\n          isLabel: true\n        })\n      ]\n    });\n  }\n  getHandles(shape) {\n    const { scale } = shape.props;\n    const isCoarsePointer = this.editor.getInstanceState().isCoarsePointer;\n    if (isCoarsePointer) return [];\n    const zoom = this.editor.getZoomLevel();\n    if (zoom * scale < 0.25) return [];\n    const nh = getNoteHeight(shape);\n    const nw = NOTE_SIZE * scale;\n    const offset = CLONE_HANDLE_MARGIN / zoom * scale;\n    if (zoom * scale < 0.5) {\n      return [\n        {\n          id: \"bottom\",\n          index: \"a3\",\n          type: \"clone\",\n          x: nw / 2,\n          y: nh + offset\n        }\n      ];\n    }\n    return [\n      {\n        id: \"top\",\n        index: \"a1\",\n        type: \"clone\",\n        x: nw / 2,\n        y: -offset\n      },\n      {\n        id: \"right\",\n        index: \"a2\",\n        type: \"clone\",\n        x: nw + offset,\n        y: nh / 2\n      },\n      {\n        id: \"bottom\",\n        index: \"a3\",\n        type: \"clone\",\n        x: nw / 2,\n        y: nh + offset\n      },\n      {\n        id: \"left\",\n        index: \"a4\",\n        type: \"clone\",\n        x: -offset,\n        y: nh / 2\n      }\n    ];\n  }\n  getText(shape) {\n    return shape.props.text;\n  }\n  component(shape) {\n    const {\n      id,\n      type,\n      props: {\n        labelColor,\n        scale,\n        color,\n        font,\n        size,\n        align,\n        text,\n        verticalAlign,\n        fontSizeAdjustment\n      }\n    } = shape;\n    const handleKeyDown = useNoteKeydownHandler(id);\n    const theme = useDefaultColorTheme();\n    const nw = NOTE_SIZE * scale;\n    const nh = getNoteHeight(shape);\n    const rotation = useValue(\n      \"shape rotation\",\n      () => this.editor.getShapePageTransform(id)?.rotation() ?? 0,\n      [this.editor]\n    );\n    const hideShadows = useValue(\"zoom\", () => this.editor.getZoomLevel() < 0.35 / scale, [\n      scale,\n      this.editor\n    ]);\n    const isDarkMode = useValue(\"dark mode\", () => this.editor.user.getIsDarkMode(), [this.editor]);\n    const isSelected = shape.id === this.editor.getOnlySelectedShapeId();\n    return /* @__PURE__ */ jsxs(Fragment, { children: [\n      /* @__PURE__ */ jsx(\n        \"div\",\n        {\n          id,\n          className: \"tl-note__container\",\n          style: {\n            width: nw,\n            height: nh,\n            backgroundColor: theme[color].note.fill,\n            borderBottom: hideShadows ? isDarkMode ? `${2 * scale}px solid rgb(20, 20, 20)` : `${2 * scale}px solid rgb(144, 144, 144)` : \"none\",\n            boxShadow: hideShadows ? \"none\" : getNoteShadow(shape.id, rotation, scale)\n          },\n          children: /* @__PURE__ */ jsx(\n            TextLabel,\n            {\n              shapeId: id,\n              type,\n              font,\n              fontSize: (fontSizeAdjustment || LABEL_FONT_SIZES[size]) * scale,\n              lineHeight: TEXT_PROPS.lineHeight,\n              align,\n              verticalAlign,\n              text,\n              isNote: true,\n              isSelected,\n              labelColor: labelColor === \"black\" ? theme[color].note.text : theme[labelColor].fill,\n              wrap: true,\n              padding: 16 * scale,\n              onKeyDown: handleKeyDown\n            }\n          )\n        }\n      ),\n      \"url\" in shape.props && shape.props.url && /* @__PURE__ */ jsx(HyperlinkButton, { url: shape.props.url })\n    ] });\n  }\n  indicator(shape) {\n    const { scale } = shape.props;\n    return /* @__PURE__ */ jsx(\n      \"rect\",\n      {\n        rx: scale,\n        width: toDomPrecision(NOTE_SIZE * scale),\n        height: toDomPrecision(getNoteHeight(shape))\n      }\n    );\n  }\n  toSvg(shape, ctx) {\n    if (shape.props.text) ctx.addExportDef(getFontDefForExport(shape.props.font));\n    const theme = getDefaultColorTheme({ isDarkMode: ctx.isDarkMode });\n    const bounds = getBoundsForSVG(shape);\n    return /* @__PURE__ */ jsxs(Fragment, { children: [\n      /* @__PURE__ */ jsx(\"rect\", { x: 5, y: 5, rx: 1, width: NOTE_SIZE - 10, height: bounds.h, fill: \"rgba(0,0,0,.1)\" }),\n      /* @__PURE__ */ jsx(\n        \"rect\",\n        {\n          rx: 1,\n          width: NOTE_SIZE,\n          height: bounds.h,\n          fill: theme[shape.props.color].note.fill\n        }\n      ),\n      /* @__PURE__ */ jsx(\n        SvgTextLabel,\n        {\n          fontSize: shape.props.fontSizeAdjustment || LABEL_FONT_SIZES[shape.props.size],\n          font: shape.props.font,\n          align: shape.props.align,\n          verticalAlign: shape.props.verticalAlign,\n          text: shape.props.text,\n          labelColor: theme[shape.props.color].note.text,\n          bounds,\n          stroke: false\n        }\n      )\n    ] });\n  }\n  onBeforeCreate(next) {\n    return getNoteSizeAdjustments(this.editor, next);\n  }\n  onBeforeUpdate(prev, next) {\n    if (prev.props.text === next.props.text && prev.props.font === next.props.font && prev.props.size === next.props.size) {\n      return;\n    }\n    return getNoteSizeAdjustments(this.editor, next);\n  }\n  onEditEnd(shape) {\n    const {\n      id,\n      type,\n      props: { text }\n    } = shape;\n    if (text.trimEnd() !== shape.props.text) {\n      this.editor.updateShapes([\n        {\n          id,\n          type,\n          props: {\n            text: text.trimEnd()\n          }\n        }\n      ]);\n    }\n  }\n  getInterpolatedProps(startShape, endShape, t) {\n    return {\n      ...(t > 0.5 ? endShape.props : startShape.props),\n      scale: lerp(startShape.props.scale, endShape.props.scale, t)\n    };\n  }\n}\nfunction getNoteSizeAdjustments(editor, shape) {\n  const { labelHeight, fontSizeAdjustment } = getLabelSize(editor, shape);\n  const growY = Math.max(0, labelHeight - NOTE_SIZE);\n  if (growY !== shape.props.growY || fontSizeAdjustment !== shape.props.fontSizeAdjustment) {\n    return {\n      ...shape,\n      props: {\n        ...shape.props,\n        growY,\n        fontSizeAdjustment\n      }\n    };\n  }\n}\nfunction getNoteLabelSize(editor, shape) {\n  const { text } = shape.props;\n  if (!text) {\n    const minHeight = LABEL_FONT_SIZES[shape.props.size] * TEXT_PROPS.lineHeight + LABEL_PADDING * 2;\n    return { labelHeight: minHeight, labelWidth: 100, fontSizeAdjustment: 0 };\n  }\n  const unadjustedFontSize = LABEL_FONT_SIZES[shape.props.size];\n  let fontSizeAdjustment = 0;\n  let iterations = 0;\n  let labelHeight = NOTE_SIZE;\n  let labelWidth = NOTE_SIZE;\n  const FUZZ = 1;\n  do {\n    fontSizeAdjustment = Math.min(unadjustedFontSize, unadjustedFontSize - iterations);\n    const nextTextSize = editor.textMeasure.measureText(text, {\n      ...TEXT_PROPS,\n      fontFamily: FONT_FAMILIES[shape.props.font],\n      fontSize: fontSizeAdjustment,\n      maxWidth: NOTE_SIZE - LABEL_PADDING * 2 - FUZZ,\n      disableOverflowWrapBreaking: true\n    });\n    labelHeight = nextTextSize.h + LABEL_PADDING * 2;\n    labelWidth = nextTextSize.w + LABEL_PADDING * 2;\n    if (fontSizeAdjustment <= 14) {\n      const nextTextSizeWithOverflowBreak = editor.textMeasure.measureText(text, {\n        ...TEXT_PROPS,\n        fontFamily: FONT_FAMILIES[shape.props.font],\n        fontSize: fontSizeAdjustment,\n        maxWidth: NOTE_SIZE - LABEL_PADDING * 2 - FUZZ\n      });\n      labelHeight = nextTextSizeWithOverflowBreak.h + LABEL_PADDING * 2;\n      labelWidth = nextTextSizeWithOverflowBreak.w + LABEL_PADDING * 2;\n      break;\n    }\n    if (nextTextSize.scrollWidth.toFixed(0) === nextTextSize.w.toFixed(0)) {\n      break;\n    }\n  } while (iterations++ < 50);\n  return {\n    labelHeight,\n    labelWidth,\n    fontSizeAdjustment\n  };\n}\nconst labelSizesForNote = new WeakCache();\nfunction getLabelSize(editor, shape) {\n  return labelSizesForNote.get(shape, () => getNoteLabelSize(editor, shape));\n}\nfunction useNoteKeydownHandler(id) {\n  const editor = useEditor();\n  const translation = useCurrentTranslation();\n  return useCallback(\n    (e) => {\n      const shape = editor.getShape(id);\n      if (!shape) return;\n      const isTab = e.key === \"Tab\";\n      const isCmdEnter = (e.metaKey || e.ctrlKey) && e.key === \"Enter\";\n      if (isTab || isCmdEnter) {\n        e.preventDefault();\n        const pageTransform = editor.getShapePageTransform(id);\n        const pageRotation = pageTransform.rotation();\n        const isRTL = !!(translation.dir === \"rtl\" || isRightToLeftLanguage(shape.props.text));\n        const offsetLength = (NOTE_SIZE + editor.options.adjacentShapeMargin + // If we're growing down, we need to account for the current shape's growY\n        (isCmdEnter && !e.shiftKey ? shape.props.growY : 0)) * shape.props.scale;\n        const adjacentCenter = new Vec(\n          isTab ? e.shiftKey != isRTL ? -1 : 1 : 0,\n          isCmdEnter ? e.shiftKey ? -1 : 1 : 0\n        ).mul(offsetLength).add(NOTE_CENTER_OFFSET.clone().mul(shape.props.scale)).rot(pageRotation).add(pageTransform.point());\n        const newNote = getNoteShapeForAdjacentPosition(editor, shape, adjacentCenter, pageRotation);\n        if (newNote) {\n          editor.markHistoryStoppingPoint(\"editing adjacent shape\");\n          startEditingShapeWithLabel(\n            editor,\n            newNote,\n            true\n            /* selectAll */\n          );\n        }\n      }\n    },\n    [id, editor, translation.dir]\n  );\n}\nfunction getNoteHeight(shape) {\n  return (NOTE_SIZE + shape.props.growY) * shape.props.scale;\n}\nfunction getNoteShadow(id, rotation, scale) {\n  const random = rng(id);\n  const lift = Math.abs(random()) + 0.5;\n  const oy = Math.cos(rotation);\n  const a = 5 * scale;\n  const b = 4 * scale;\n  const c = 6 * scale;\n  const d = 7 * scale;\n  return `0px ${a - lift}px ${a}px -${a}px rgba(15, 23, 31, .6),\n\t0px ${(b + lift * d) * Math.max(0, oy)}px ${c + lift * d}px -${b + lift * c}px rgba(15, 23, 31, ${(0.3 + lift * 0.1).toFixed(2)}), \n\t0px ${48 * scale}px ${10 * scale}px -${10 * scale}px inset rgba(15, 23, 44, ${((0.022 + random() * 5e-3) * ((1 + oy) / 2)).toFixed(2)})`;\n}\nfunction getBoundsForSVG(shape) {\n  return new Box(0, 0, NOTE_SIZE, NOTE_SIZE + shape.props.growY);\n}\nexport {\n  NoteShapeUtil\n};\n//# sourceMappingURL=NoteShapeUtil.mjs.map\n","import { roundedRectangleDataSize } from \"./minimap-webgl-shapes.mjs\";\nfunction setupWebGl(canvas) {\n  if (!canvas) throw new Error(\"Canvas element not found\");\n  const context = canvas.getContext(\"webgl2\", {\n    premultipliedAlpha: false\n  });\n  if (!context) throw new Error(\"Failed to get webgl2 context\");\n  const vertexShaderSourceCode = `#version 300 es\n  precision mediump float;\n  \n  in vec2 shapeVertexPosition;\n\n\tuniform vec4 canvasPageBounds;\n\n\t// taken (with thanks) from\n\t// https://webglfundamentals.org/webgl/lessons/webgl-2d-matrices.html\n  void main() {\n\t\t// convert the position from pixels to 0.0 to 1.0\n\t\tvec2 zeroToOne = (shapeVertexPosition - canvasPageBounds.xy) / canvasPageBounds.zw;\n\t\n\t\t// convert from 0->1 to 0->2\n\t\tvec2 zeroToTwo = zeroToOne * 2.0;\n\t\n\t\t// convert from 0->2 to -1->+1 (clipspace)\n\t\tvec2 clipSpace = zeroToTwo - 1.0;\n\t\n\t\tgl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\n  }`;\n  const vertexShader = context.createShader(context.VERTEX_SHADER);\n  if (!vertexShader) {\n    throw new Error(\"Failed to create vertex shader\");\n  }\n  context.shaderSource(vertexShader, vertexShaderSourceCode);\n  context.compileShader(vertexShader);\n  if (!context.getShaderParameter(vertexShader, context.COMPILE_STATUS)) {\n    throw new Error(\"Failed to compile vertex shader\");\n  }\n  const fragmentShaderSourceCode = `#version 300 es\n  precision mediump float;\n  \n\tuniform vec4 fillColor;\n  out vec4 outputColor;\n\n  void main() {\n\toutputColor = fillColor;\n  }`;\n  const fragmentShader = context.createShader(context.FRAGMENT_SHADER);\n  if (!fragmentShader) {\n    throw new Error(\"Failed to create fragment shader\");\n  }\n  context.shaderSource(fragmentShader, fragmentShaderSourceCode);\n  context.compileShader(fragmentShader);\n  if (!context.getShaderParameter(fragmentShader, context.COMPILE_STATUS)) {\n    throw new Error(\"Failed to compile fragment shader\");\n  }\n  const program = context.createProgram();\n  if (!program) {\n    throw new Error(\"Failed to create program\");\n  }\n  context.attachShader(program, vertexShader);\n  context.attachShader(program, fragmentShader);\n  context.linkProgram(program);\n  if (!context.getProgramParameter(program, context.LINK_STATUS)) {\n    throw new Error(\"Failed to link program\");\n  }\n  context.useProgram(program);\n  const shapeVertexPositionAttributeLocation = context.getAttribLocation(\n    program,\n    \"shapeVertexPosition\"\n  );\n  if (shapeVertexPositionAttributeLocation < 0) {\n    throw new Error(\"Failed to get shapeVertexPosition attribute location\");\n  }\n  context.enableVertexAttribArray(shapeVertexPositionAttributeLocation);\n  const canvasPageBoundsLocation = context.getUniformLocation(program, \"canvasPageBounds\");\n  const fillColorLocation = context.getUniformLocation(program, \"fillColor\");\n  const selectedShapesBuffer = context.createBuffer();\n  if (!selectedShapesBuffer) throw new Error(\"Failed to create buffer\");\n  const unselectedShapesBuffer = context.createBuffer();\n  if (!unselectedShapesBuffer) throw new Error(\"Failed to create buffer\");\n  return {\n    context,\n    selectedShapes: allocateBuffer(context, 1024),\n    unselectedShapes: allocateBuffer(context, 4096),\n    viewport: allocateBuffer(context, roundedRectangleDataSize),\n    collaborators: allocateBuffer(context, 1024),\n    prepareTriangles(stuff, len) {\n      context.bindBuffer(context.ARRAY_BUFFER, stuff.buffer);\n      context.bufferData(context.ARRAY_BUFFER, stuff.vertices, context.STATIC_DRAW, 0, len);\n      context.enableVertexAttribArray(shapeVertexPositionAttributeLocation);\n      context.vertexAttribPointer(\n        shapeVertexPositionAttributeLocation,\n        2,\n        context.FLOAT,\n        false,\n        0,\n        0\n      );\n    },\n    drawTrianglesTransparently(len) {\n      context.enable(context.BLEND);\n      context.blendFunc(context.SRC_ALPHA, context.ONE_MINUS_SRC_ALPHA);\n      context.drawArrays(context.TRIANGLES, 0, len / 2);\n      context.disable(context.BLEND);\n    },\n    drawTriangles(len) {\n      context.drawArrays(context.TRIANGLES, 0, len / 2);\n    },\n    setFillColor(color) {\n      context.uniform4fv(fillColorLocation, color);\n    },\n    setCanvasPageBounds(bounds) {\n      context.uniform4fv(canvasPageBoundsLocation, bounds);\n    }\n  };\n}\nfunction allocateBuffer(context, size) {\n  const buffer = context.createBuffer();\n  if (!buffer) throw new Error(\"Failed to create buffer\");\n  return { buffer, vertices: new Float32Array(size) };\n}\nfunction appendVertices(bufferStuff, offset, data) {\n  let len = bufferStuff.vertices.length;\n  while (len < offset + data.length) {\n    len *= 2;\n  }\n  if (len != bufferStuff.vertices.length) {\n    const newVertices = new Float32Array(len);\n    newVertices.set(bufferStuff.vertices);\n    bufferStuff.vertices = newVertices;\n  }\n  bufferStuff.vertices.set(data, offset);\n}\nexport {\n  appendVertices,\n  setupWebGl\n};\n//# sourceMappingURL=minimap-webgl-setup.mjs.map\n","import { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nimport { preventDefault, useEditor, useEvent, useUniqueSafeId } from \"@tldraw/editor\";\nimport classNames from \"classnames\";\nimport hotkeys from \"hotkeys-js\";\nimport { createContext, useEffect, useLayoutEffect, useMemo, useRef, useState } from \"react\";\nimport { PORTRAIT_BREAKPOINT } from \"../../constants.mjs\";\nimport { useBreakpoint } from \"../../context/breakpoints.mjs\";\nimport { areShortcutsDisabled } from \"../../hooks/useKeyboardShortcuts.mjs\";\nimport { useTranslation } from \"../../hooks/useTranslation/useTranslation.mjs\";\nimport { TldrawUiButton } from \"../primitives/Button/TldrawUiButton.mjs\";\nimport { TldrawUiButtonIcon } from \"../primitives/Button/TldrawUiButtonIcon.mjs\";\nimport {\n  TldrawUiDropdownMenuContent,\n  TldrawUiDropdownMenuRoot,\n  TldrawUiDropdownMenuTrigger\n} from \"../primitives/TldrawUiDropdownMenu.mjs\";\nimport { TldrawUiMenuContextProvider } from \"../primitives/menus/TldrawUiMenuContext.mjs\";\nconst IsInOverflowContext = createContext(false);\nfunction OverflowingToolbar({ children }) {\n  const editor = useEditor();\n  const id = useUniqueSafeId();\n  const breakpoint = useBreakpoint();\n  const msg = useTranslation();\n  const overflowIndex = Math.min(8, 5 + breakpoint);\n  const [totalItems, setTotalItems] = useState(0);\n  const mainToolsRef = useRef(null);\n  const [lastActiveOverflowItem, setLastActiveOverflowItem] = useState(null);\n  const css = useMemo(() => {\n    const activeCss = lastActiveOverflowItem ? `:not([data-value=\"${lastActiveOverflowItem}\"])` : \"\";\n    return `\n\t\t\t#${id}_main > *:nth-child(n + ${overflowIndex + (lastActiveOverflowItem ? 1 : 2)})${activeCss} {\n\t\t\t\tdisplay: none;\n\t\t\t}\n\t\t\t#${id}_more > *:nth-child(-n + ${overflowIndex}) {\n\t\t\t\tdisplay: none;\n\t\t\t}\n        `;\n  }, [lastActiveOverflowItem, id, overflowIndex]);\n  const onDomUpdate = useEvent(() => {\n    if (!mainToolsRef.current) return;\n    const children2 = Array.from(mainToolsRef.current.children);\n    setTotalItems(children2.length);\n    const lastActiveElementIdx = children2.findIndex(\n      (el) => el.getAttribute(\"data-value\") === lastActiveOverflowItem\n    );\n    if (lastActiveElementIdx <= overflowIndex) {\n      setLastActiveOverflowItem(null);\n    }\n    const activeElementIdx = Array.from(mainToolsRef.current.children).findIndex(\n      (el) => el.getAttribute(\"aria-checked\") === \"true\"\n    );\n    if (activeElementIdx === -1) return;\n    if (activeElementIdx >= overflowIndex) {\n      setLastActiveOverflowItem(children2[activeElementIdx].getAttribute(\"data-value\"));\n    }\n  });\n  useLayoutEffect(() => {\n    onDomUpdate();\n  });\n  useLayoutEffect(() => {\n    if (!mainToolsRef.current) return;\n    const mutationObserver = new MutationObserver(onDomUpdate);\n    mutationObserver.observe(mainToolsRef.current, {\n      childList: true,\n      subtree: true,\n      attributeFilter: [\"data-value\", \"aria-checked\"]\n    });\n    return () => {\n      mutationObserver.disconnect();\n    };\n  }, [onDomUpdate]);\n  useEffect(() => {\n    const keys = [\n      [\"1\", 0],\n      [\"2\", 1],\n      [\"3\", 2],\n      [\"4\", 3],\n      [\"5\", 4],\n      [\"6\", 5],\n      [\"7\", 6],\n      [\"8\", 7],\n      [\"9\", 8],\n      [\"0\", 9]\n    ];\n    for (const [key, index] of keys) {\n      hotkeys(key, (event) => {\n        if (areShortcutsDisabled(editor)) return;\n        preventDefault(event);\n        const relevantEls = Array.from(mainToolsRef.current?.children ?? []).filter(\n          (el2) => {\n            if (!(el2 instanceof HTMLElement)) return false;\n            if (el2.tagName.toLowerCase() !== \"button\") return false;\n            return !!(el2.offsetWidth || el2.offsetHeight);\n          }\n        );\n        const el = relevantEls[index];\n        if (el) el.click();\n      });\n    }\n    return () => {\n      hotkeys.unbind(\"1,2,3,4,5,6,7,8,9,0\");\n    };\n  }, [editor]);\n  return /* @__PURE__ */ jsxs(Fragment, { children: [\n    /* @__PURE__ */ jsx(\"style\", { children: css }),\n    /* @__PURE__ */ jsxs(\n      \"div\",\n      {\n        className: classNames(\"tlui-toolbar__tools\", {\n          \"tlui-toolbar__tools__mobile\": breakpoint < PORTRAIT_BREAKPOINT.TABLET_SM\n        }),\n        role: \"radiogroup\",\n        children: [\n          /* @__PURE__ */ jsx(\"div\", { id: `${id}_main`, ref: mainToolsRef, className: \"tlui-toolbar__tools__list\", children: /* @__PURE__ */ jsx(TldrawUiMenuContextProvider, { type: \"toolbar\", sourceId: \"toolbar\", children }) }),\n          totalItems > overflowIndex + 1 && /* @__PURE__ */ jsx(IsInOverflowContext.Provider, { value: true, children: /* @__PURE__ */ jsxs(TldrawUiDropdownMenuRoot, { id: \"toolbar overflow\", modal: false, children: [\n            /* @__PURE__ */ jsx(TldrawUiDropdownMenuTrigger, { children: /* @__PURE__ */ jsx(\n              TldrawUiButton,\n              {\n                title: msg(\"tool-panel.more\"),\n                type: \"tool\",\n                className: \"tlui-toolbar__overflow\",\n                \"data-testid\": \"tools.more-button\",\n                children: /* @__PURE__ */ jsx(TldrawUiButtonIcon, { icon: \"chevron-up\" })\n              }\n            ) }),\n            /* @__PURE__ */ jsx(TldrawUiDropdownMenuContent, { side: \"top\", align: \"center\", children: /* @__PURE__ */ jsx(\n              \"div\",\n              {\n                className: \"tlui-buttons__grid\",\n                \"data-testid\": \"tools.more-content\",\n                id: `${id}_more`,\n                children: /* @__PURE__ */ jsx(TldrawUiMenuContextProvider, { type: \"toolbar-overflow\", sourceId: \"toolbar\", children })\n              }\n            ) })\n          ] }) })\n        ]\n      }\n    )\n  ] });\n}\nconst isActiveTLUiToolItem = (item, activeToolId, geoState) => {\n  return item.meta?.geo ? activeToolId === \"geo\" && geoState === item.meta?.geo : activeToolId === item.id;\n};\nexport {\n  IsInOverflowContext,\n  OverflowingToolbar,\n  isActiveTLUiToolItem\n};\n//# sourceMappingURL=OverflowingToolbar.mjs.map\n","async function preloadFont(id, font) {\n  const {\n    url,\n    style = \"normal\",\n    weight = \"500\",\n    display,\n    featureSettings,\n    stretch,\n    unicodeRange,\n    variant,\n    format\n  } = font;\n  const descriptors = {\n    style,\n    weight,\n    display,\n    featureSettings,\n    stretch,\n    unicodeRange,\n    // @ts-expect-error why is this here\n    variant\n  };\n  const fontInstance = new FontFace(id, `url(${url})`, descriptors);\n  await fontInstance.load();\n  document.fonts.add(fontInstance);\n  fontInstance.$$_url = url;\n  fontInstance.$$_fontface = `\n@font-face {\n\tfont-family: ${fontInstance.family};\n\tfont-stretch: ${fontInstance.stretch};\n\tfont-weight: ${fontInstance.weight};\n\tfont-style: ${fontInstance.style};\n\tsrc: url(\"${url}\") format(\"${format}\")\n}`;\n  return fontInstance;\n}\nexport {\n  preloadFont\n};\n//# sourceMappingURL=preload-font.mjs.map\n"],"names":[],"mappings":";;AAwGA;;ACjGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;ACuEA;AACA;AACA;;AAEA;ACsBA;AAIA;ACzDA;;ACjDA;AACA;;AAVA;AACA;AACA;ACyEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC+HA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjSA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC+HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvHA;AACA;AACA;AA4BA;AACA;AACA;AA0BA;AACA;AACA;AA4BA;AACA;AACA;AClEA;AACA;;;;;;;;;;;;AH1CA;AAAA;AAAA;AIyYA;AACA;AClYA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;;AAEA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA"}